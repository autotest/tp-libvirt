- convert_from_file:
    type = 'convert_from_file'
    vm_type = 'libvirt'
    start_vm = 'no'
    take_regular_screendumps = no
    v2v_timeout = '7200'
    v2v_debug = on

    # Regular kvm guest parameters
    os_type = 'linux'
    input_mode = 'libvirt'
    hypervisor = 'kvm'
    username = 'root'
    password = GENERAL_GUEST_PASSWORD
    vms = ''

    # Shell parameters
    remote_shell_client = 'ssh'
    remote_shell_port = 22
    remote_shell_prompt = '^\w:\\.*>\s*$|^\[.*\][\#\$]\s*$'
    status_test_command = 'echo $?'

    variants:
        - output_mode:
            variants:
                - libvirt:
                    only dest_libvirt
                - rhev:
                    only dest_rhev.NFS
                    variants:
                        - rhv_upload:
                            output_method = "rhv_upload"
                            rhv_upload_passwd = ${ovirt_engine_password}
                            rhv_upload_passwd_file = "/tmp/rhv_upload_passwd_file"
                            rhv_upload_opts = "-oc ${ovirt_engine_url} -op ${rhv_upload_passwd_file} -oo rhv-cafile=${local_ca_file_path} -oo rhv-cluster=${cluster_name}"
                            rhv_upload_opts = "${rhv_upload_opts} -oo rhv-direct"
                        - rhv:
                            output_method = "rhev"
                - local:
                    only dest_local
    variants:
        - input_mode:
            variants:
                - disk:
                    only source_none
                    input_mode = "disk"
                - libvirtxml:
                    only source_none
                    input_mode = "libvirtxml"
                - ova:
                    only source_none
                    input_mode = "ova"
                    ova_dir = 'OVA_DIR_V2V_EXAMPLE'
                    ova_copy_dir = 'OVA_DIR_COPY_V2V_EXAMPLE'
                    variants:
                        - normal:
                            only output_mode.libvirt,output_mode.rhev
                            variants:
                                - ova_tar:
                                    input_file = '${ova_copy_dir}/OVA_TAR_FILE_V2V_EXAMPLE'
                                - ova_zip:
                                    input_file = '${ova_copy_dir}/OVA_ZIP_FILE_V2V_EXAMPLE'
                                - ova_pigz:
                                    input_file = '${ova_copy_dir}/OVA_PIGZ_FILE_V2V_EXAMPLE'
                                - ova_xz:
                                    input_file = '${ova_copy_dir}/OVA_XZ_FILE_V2V_EXAMPLE'
                                - ova_relative_path:
                                    input_file = '${ova_copy_dir}/OVA_RELATIVE_PATH_V2V_EXAMPLE'
                                    checkpoint = 'ova_relative_path'
                                - ova_abs_path:
                                    input_file = '${ova_copy_dir}/OVA_RELATIVE_PATH_V2V_EXAMPLE'
                                - ova_vmdk_gz_zip:
                                    input_file = '${ova_copy_dir}/OVA_VMDKGZ_ZIP_FILE_V2V_EXAMPLE'
                                - ova_vmdk_gz_tar:
                                    input_file = '${ova_copy_dir}/OVA_VMDKGZ_TAR_FILE_V2V_EXAMPLE'
                                - permission:
                                    input_file = '${ova_copy_dir}/OVA_TAR_FILE_V2V_EXAMPLE'
                                    checkpoint = permission
                                - rhel6_5:
                                    ova_dir = OVA_DIR_RHEL65_V2V_EXAMPLE
                                    input_file = ${ova_copy_dir}/OVA_FILE_RHEL65_V2V_EXAMPLE
                                - linux:
                                    ova_dir = OVA_DIR_RHEL_LINUX_V2V_EXAMPLE
                                    ova_copy_dir = 'OVA_DIR_COPY_V2V_EXAMPLE/OVA_DIR_DIRECTORY_LINUX_RHEL'
                                    input_file = ${ova_copy_dir}
                                    msg_content = 'ova disk has an unknown VMware controller type'
                                    expect_msg = no
                                - missing_file:
                                    ova_dir = OVA_DIR_ROOT_V2V_EXAMPLE/OVA_MISSING_FILE_V2V_EXAMPLE
                                    input_file = ${ova_copy_dir}/OVA_MISSING_FILE_V2V_EXAMPLE
                                    msg_content = 'manifest has a checksum for non-existent file'
                                    expect_msg = yes
                                    skip_vm_check = yes
                                - with_dir_end:
                                    ova_dir = OVA_DIR_RHEL_LINUX_V2V_EXAMPLE
                                    ova_copy_dir = 'OVA_DIR_COPY_V2V_EXAMPLE/OVA_DIR_DIRECTORY_LINUX_RHEL'
                                    input_file = '${ova_copy_dir}/'
                        - special:
                            ova_dir = 'OVA_DIR_SPECIAL_V2V_EXAMPLE'
                            variants:
                                - parent_ctrl:
                                    checkpoint = "parent_ctrl"
                                    input_file = "${ova_copy_dir}/OVA_FILE_BUG_1167302_V2V_EXAMPLE"
                                - win2008r2_ostk:
                                    checkpoint = "win2008r2_ostk"
                                    input_file = "${ova_dir}/OVA_FILE_BUG_1161333_V2V_EXAMPLE"
                                    image_to_match = "${ova_dir}/BSOD_IMAGE_V2V_EXAMPLE"
                                    v2v_timeout = 1800
                                    only output_mode.libvirt
                        - parse:
                            ova_dir = OVA_DIR_PARSE_V2V_EXAMPLE
                            skip_vm_check = yes
                            variants:
                                - SHA1:
                                    ova_file = OVA_FILE_SHA1_V2V_EXAMPLE
                                    msg_content = 'virt-v2v: error: -i ova: corrupt OVA: checksum of disk .*? does not match manifest'
                                    expect_msg = yes
                                    only negative_test
                                - SHA256:
                                    ova_file = OVA_FILE_SHA256_V2V_EXAMPLE
                                    msg_content = 'virt-v2v: error: -i ova: corrupt OVA: checksum of disk .*? does not match manifest'
                                    expect_msg = yes
                                    only negative_test
                                - SHA1_SHA256:
                                    ova_file = OVA_FILE_SHA1SHA256_V2V_EXAMPLE
                                - invalid_line_in_manifest:
                                    ova_file = OVA_FILE_INVALID_LINE_IN_MANIFEST_V2V_EXAMPLE
                                    msg_content = 'virt-v2v: warning: unable to parse line from manifest file: "only garbage on this line"'
                                    expect_msg = yes
                                - invalid_line_in_manifest_missing_space:
                                    ova_file = OVA_FILE_INVALID_LINE_IN_MANIFEST_MISSING_SPACE_V2V_EXAMPLE
                                    msg_content = 'virt-v2v: warning: unable to parse line from manifest file'
                                    expect_msg = yes
                            input_file = ${ova_dir}/${ova_file}
                        - aws:
                            only output_mode.rhev
                            ova_dir = OVA_DIR_AWS_V2V_EXAMPLE
                            variants:
                                - rhel7_2:
                                    ova_file = OVA_FILE_RHEL72_AWS_V2V_EXAMPLE
                                - win2019:
                                    ova_file = OVA_FILE_WIN2019_AWS_V2V_EXAMPLE
                                    os_version = OS_VERSION_WIN2019_AWS_V2V_EXAMPLE
                                - ec2:
                                    ova_file = OVA_FILE_EC2_V2V_EXAMPLE
                                - Eaton:
                                    ova_file = OVA_FILE_EATON_V2V_EXAMPLE
                                    skip_vm_check = yes
                            input_file = ${ova_copy_dir}/${ova_file}
                - vmx:
                    input_mode = "vmx"
                    hypervisor = 'esx'
                    only source_esx
                    no output_mode.local
                    variants:
                        # VM names can be different between vmx_ssh and vmx_default
                        # based on test requirements, so the VMs are not grouped.
                        - vmx_ssh:
                            input_transport = 'ssh'
                            variants:
                                - latest8:
                                    v2v_debug = force_on
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL8_V2V_EXAMPLE'
                                    msg_content = 'scp -T'
                                    expect_msg = yes
                                - latest7:
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL7_V2V_EXAMPLE'
                                - latest6:
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL6_V2V_EXAMPLE'
                                - regular_user_sudo:
                                    checkpoint = 'regular_user_sudo'
                                    main_vm = 'VM_NAME_RHEL8_V2V_EXAMPLE'
                                    env_settings = 'eval `ssh-agent`;ssh-add;sudo -E LIBGUESTFS_BACKEND=direct'
                                    unprivileged_user = 'USER_UNPRIVILEGED_V2V_EXAMPLE'
                                    #os_directory = '/home/${unprivileged_user}'
                                    only esx_67
                        - vmx_default:
                            # Default
                            vmx_nfs_src = NFS_ESX67_VMX_V2V_EXAMPLE
                            # Do not skip vm checking by default
                            skip_vm_check = no
                            # By default, v2v will try to connect to source hypervisor
                            # to get vm information, like disk path in esx, etc.
                            # But in some testing environment, it don't have source
                            # hypervisor, such as gating environment, we need to skip
                            # the step of connecting to the hypervisor.
                            #
                            # The default is 'no'.
                            skip_virsh_pre_conn = no
                            variants:
                                - win2012r2:
                                    only esx_60
                                    only windows
                                    os_version = 'win2012r2'
                                    has_genid = 'no'
                                    main_vm = 'VM_NAME_GENID_WIN2012R2_V2V_EXAMPLE'
                                    vmx_nfs_src = NFS_ESX60_VMX_V2V_EXAMPLE
                                    # genid only supports libvirt, local, qemu
                                    only output_mode.libvirt
                                - win2019:
                                    only esx_67
                                    only windows
                                    os_version = 'win2019'
                                    has_genid = 'yes'
                                    main_vm = 'VM_NAME_GENID_WIN2019_V2V_EXAMPLE'
                                    vmx_nfs_src = NFS_ESX67_VMX_V2V_EXAMPLE
                                    # genid only supports libvirt, local, qemu
                                    only output_mode.libvirt
                                - win10:
                                    only esx_67
                                    only windows
                                    os_version = 'win10'
                                    has_genid = 'yes'
                                    main_vm = 'VM_NAME_GENID_WIN10_V2V_EXAMPLE'
                                    vmx_nfs_src = NFS_ESX67_VMX_V2V_EXAMPLE
                                    # genid only supports libvirt, local, qemu
                                    only output_mode.libvirt
                                - latest8:
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL8_V2V_EXAMPLE'
                                - latest7:
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL7_V2V_EXAMPLE'
                                - latest6:
                                    only esx_67
                                    main_vm = 'VM_NAME_RHEL6_V2V_EXAMPLE'

    variants:
        - negative_test:
            status_error = 'yes'
            only parse.SHA1,parse.SHA256
        - positive_test:
            status_error = 'no'
            variants:
                - linux:
                    only ova,vmx
                    no win2008r2_ostk,aws.win2019
                - windows:
                    os_type = 'windows'
                    shutdown_command = 'shutdown /s /f /t 0'
                    reboot_command = 'shutdown /r /f /t 0'
                    status_test_command = 'echo %errorlevel%'
                    shell_prompt = '^\w:\\.*>\s*$'
                    shell_linesep = '\r\n'
                    shell_client = 'nc'
                    shell_port = 10022
                    file_transfer_client = 'rss'
                    file_transfer_port = 10023
                    redirs += ' file_transfer'
                    guest_port_remote_shell = 10022
                    guest_port_file_transfer = 10023
                    rtc_base = 'localtime'
                    network_query = 'ipconfig /all'
                    restart_network = 'ipconfig /renew'
                    vm_user = 'Administrator'
                    vm_pwd = DEFAULT_WIN_VM_PASSWORD
                    only win2008r2_ostk,aws.win2019,win2019,win10,win2012r2
