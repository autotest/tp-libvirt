- function_test_xen:
    type = 'function_test_xen'
    vm_type = 'libvirt'
    start_vm = 'no'
    take_regular_screendumps = no
    v2v_timeout = '1200'
    default_output_format = 'qcow2'

    # Xen host info
    hypervisor = 'xen'
    xen_hostname = 'XEN_HOSTNAME_V2V_EXAMPLE'
    xen_host_user = 'root'
    xen_host_passwd = 'redhat'
    remote_host = ${xen_hostname}

    # Guest info
    os_type = 'linux'
    main_vm = 'XEN_VM_NAME_V2V_EXAMPLE'
    username = 'root'
    password = 'redhat'
    os_version = 'XEN_VM_OS_VERSION_V2V_EXAMPLE'

    # Standard shell parameters
    remote_shell_client = 'ssh'
    remote_shell_port = 22
    remote_shell_prompt = '^\w:\\.*>\s*$|^\[.*\][\#\$]\s*$'
    status_test_command = 'echo $?'

    # Full types input disks
    variants:
        - output_mode:
            variants:
                - libvirt:
                    output_mode = 'libvirt'
                    target = 'libvirt'
                    network = 'default'
                    bridge = 'virbr0'
                    pool_type = 'dir'
                    pool_name = 'v2v_dir'
                    pool_target = 'v2v_dir_pool'
                    output_storage = ${pool_name}
                - rhev:
                    output_mode = 'rhev'
                    network = 'OVIRT_NODE_NETWORK_V2V_EXAMPLE'
                    bridge = 'OVIRT_NODE_BRIDGE_V2V_EXAMPLE'
                    target = 'ovirt'
                    ovirt_engine_url = "https://OVIRT_ENGINE_URL_V2V_EXAMPLE/api"
                    ovirt_engine_user = "OVIRT_ENGINE_USER_V2V_EXAMPLE"
                    ovirt_engine_password = "OVIRT_ENGINE_PASSWORD_V2V_EXAMPLE"
                    export_name = 'NFS_EXPORT_NAME_V2V_EXAMPLE'
                    storage_name = 'NFS_STORAGE_NAME_V2V_EXAMPLE'
                    cluster_name = 'NFS_CLUSTER_NAME_V2V_EXAMPLE'
                    # Using NFS storage here
                    nfs_storage = 'NFS_EXPORT_STORAGE_V2V_EXAMPLE'
                    output_storage = ${nfs_storage}
                    # Libvirt SASL authencation(under VDSM control)
                    sasl_user = 'v2v_tester@ovirt'
                    sasl_pwd = 'v2v_tester_pwd'
                    remote_ip = 'NFS_OVIRT_NODE_ADDRESS_V2V_EXAMPLE'
                    remote_preprocess = 'yes'
                    remote_node_address = ${remote_ip}
                    remote_node_user = 'root'
                    remote_node_password = 'redhat'
                    remote_user = ${remote_node_user}
                    remote_pwd = ${remote_node_password}
    variants:
        - xen_vm_default:
        - multiconsole:
            main_vm = 'MULTICONSOLE_VM_NAME_V2V_EXAMPLE'
        - console_xvc0:
            checkpoint = 'console_xvc0'
            main_vm = 'CONSOLE_XVC0_VM_NAME_V2V_EXAMPLE'
        - xvda_disk:
            checkpoint = 'xvda_disk'
        - xvda_guest:
            checkpoint = 'xvda_guest'
        - guest_uuid:
            checkpoint = 'guest_uuid'
        - pool_uuid:
            checkpoint = 'pool_uuid'
        - display:
            main_vm = 'DISPLAY_VM_NAME_V2V_EXAMPLE'
            os_version = 'DISPLAY_OS_VERSION_V2V_EXAMPLE'
            variants:
                - vnc:
                    variants:
                        - autoport:
                            checkpoint = 'vnc_autoport'
                        - encrypt:
                            checkpoint = 'vnc_encrypt'
                            vnc_passwd = 'redhat'
                - sdl:
                    os_version = 'rhel6'
                    main_vm = 'SDL_VM_NAME_V2V_EXAMPLE'
                    checkpoint = 'sdl'
        - scsi_disk:
            main_vm = 'SCSI_VM_NAME_V2V_EXAMPLE'
        - ide_disk:
            main_vm = 'IDE_VM_NAME_V2V_EXAMPLE'
        - ssh_banner:
            checkpoint = 'ssh_banner'
        - pv_with_regular_kernel:
            checkpoint = 'pv_with_regular_kernel'
            main_vm = 'VM_NAME_PV_WITH_REGULAR_KERNEL_V2V_EXAMPLE'
        - windows:
            os_type = 'windows'
            shutdown_command = 'shutdown /s /f /t 0'
            reboot_command = 'shutdown /r /f /t 0'
            status_test_command = 'echo %errorlevel%'
            shell_prompt = '^\w:\\.*>\s*$'
            shell_linesep = '\r\n'
            shell_client = 'nc'
            shell_port = 10022
            file_transfer_client = 'rss'
            file_transfer_port = 10023
            redirs += ' file_transfer'
            guest_port_remote_shell = 10022
            guest_port_file_transfer = 10023
            rtc_base = 'localtime'
            network_query = 'ipconfig /all'
            restart_network = 'ipconfig /renew'
            vm_user = 'Administrator'
            vm_pwd = '123qweP'
            screenshots_for_match = 'WIN2003_SCREENSHOTS_V2V_EXAMPLE'
            variants:
                - default_install:
                    windows_root = 'WINDOWS_ROOT_V2V_EXAMPLE'
                    os_version = 'WINDOWS_ROOT_OS_VERSION_V2V_EXAMPLE'
                    main_vm = 'WINDOWS_ROOT_VM_NAME_V2V_EXAMPLE'
                - rhev_file:
                    checkpoint = 'rhev_file'
                    os_version = 'OS_VERSION_RHEV_FILE_V2V_EXAMPLE'
                    main_vm = 'RHEV_FILE_VM_NAME_V2V_EXAMPLE'
                - program_files_2:
                    os_version = 'PROGRAM_FILES_2_OS_VERSION_V2V_EXAMPLE'
                    main_vm = 'PROGRAM_FILES_2_VM_NAME_V2V_EXAMPLE'
    variants:
        - positive_test:
            status_error = 'no'
            no xen_vm_default
            variants:
                - libvirt:
                    only pool_uuid, windows.rhev_file, display
                    only output_mode.libvirt
                - rhev:
                    no pool_uuid, windows.rhev_file, display.vnc
                    only output_mode.rhev
        - negative_test:
            status_error = 'yes'
            only xen_vm_default
            only output_mode.libvirt
            variants:
                - libguestfs_backend_empty:
                    checkpoint = 'libguestfs_backend_empty'
                - libguestfs_backend_test:
                    checkpoint = 'libguestfs_backend_test'
                - same_name_guest:
                    checkpoint = 'same_name'
                    new_vm_name = 'avocado-vt-vm1'
                - no_passwordless_SSH:
                    checkpoint = 'no_passwordless_SSH'
                - xml_without_image:
                    checkpoint = 'xml_without_image'
                - pv_no_regular_kernel:
                    main_vm = 'VM_NAME_PV_NO_REGULAR_KERNEL_V2V_EXAMPLE'
                    checkpoint = 'pv_no_regular_kernel'
