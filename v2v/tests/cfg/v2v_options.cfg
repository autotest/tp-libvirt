- v2v_options:
    type = "v2v_options"
    vm_type = "libvirt"
    start_vm = "no"
    take_regular_screendumps = no
    xen_hostname = XEN_HOSTNAME_EXAMPLE
    vpx60_hostname = VPX_60_HOSTNAME_EXAMPLE
    vpx60_dc = VPX_60_DC_EXAMPLE
    esx60_hostname = ESX_60_HOSTNAME_EXAMPLE
    vpx55_hostname = VPX_55_HOSTNAME_EXAMPLE
    vpx55_dc = VPX_55_DC_EXAMPLE
    esx55_hostname = ESX_55_HOSTNAME_EXAMPLE
    vpx51_hostname = VPX_51_HOSTNAME_EXAMPLE
    vpx51_dc = VPX_51_DC_EXAMPLE
    esx51_hostname = ESX_51_HOSTNAME_EXAMPLE
    ovirt_engine_url = "OVIRT_SERVER_EXAMPLE"
    ovirt_engine_user = "OVIRT_USER_EXAMPLE"
    ovirt_engine_password = "OVIRT_PASSWORD_EXAMPLE"
    remote_shell_client = "ssh"
    remote_shell_port = 22
    remote_shell_prompt = "^\w:\\.*>\s*$|^\[.*\][\#\$]\s*$"
    status_test_command = "echo $?"
    pool_type = "dir"
    pool_name = "v2v_dir"
    pool_target = "v2v_dir_pool"
    nfs_storage = STORAGE_PATH_EXAMPLE
    mount_point = "/mnt_v2v"
    output_storage = ${pool_name}
    output_network = "default"
    output_bridge = "virbr0"
    os_type = "linux"
    # Using NFS storage here
    export_name = "NFS_EXPORT_EXAMPLE"
    storage_name = "NFS_DATA_EXAMPLE"
    cluster_name = "NFS"
    v2v_timeout = "1200"
    vm_user = "root"
    vm_pwd = "redhat"
    xen_host_user = "root"
    xen_host_passwd = "redhat"
    # Full types input disks
    variants:
        - output_mode:
            variants:
                - glance:
                    # No test yet
                    output_mode = "glance"
                - libvirt:
                    output_mode = "libvirt"
                    target = "libvirt"
                - local:
                    output_mode = "local"
                    output_storage = "/tmp"
                - null:
                    # No test yet
                    output_mode = "null"
                - qemu:
                    # No test yet
                    output_mode = "qemu"
                - rhev:
                    output_mode = "rhev"
                    output_network = "rhevm"
                    output_bridge = "rhevm"
                    target = "ovirt"
                    output_storage = ${nfs_storage}
                    # Libvirt SASL authencation(under VDSM control)
                    sasl_user = "vdsm@rhevh"
                    sasl_pwd = "shibboleth"
                    remote_ip = "OVIRT_NODE_IP_EXAMPLE"
                    remote_preprocess = "yes"
                    remote_node_address = ${remote_ip}
                    remote_node_user = "root"
                    remote_node_password = "redhat"
                    remote_user = ${remote_node_user}
                    remote_pwd = ${remote_node_password}
                - vdsm:
                    output_mode = "vdsm"
                - none:
    variants:
        - input_mode:
            variants:
                - disk:
                    input_mode = "disk"
                    variants:
                        # Explicit 'sparse' and 'preallocated' here for
                        # parameters replacement
                        # This will cover option '-if'
                        - raw_format:
                            input_format = "raw"
                            variants:
                                - sparse:
                                    input_allo_mode = "sparse"
                                    main_vm = "VM_NAME_RAW_SPARSE_EXAMPLE"
                                    input_disk_image = "/DISK_IMAGE_PATH/${main_vm}.img"
                                - preallocated:
                                    input_allo_mode = "preallocated"
                                    main_vm = "VM_NAME_RAW_PREALLOCATED_EXAMPLE"
                                    input_disk_image = "/DISK_IMAGE_PATH/${main_vm}.img"
                        - qcow2_format:
                            input_format = "qcow2"
                            variants:
                                - sparse:
                                    input_allo_mode = "sparse"
                                    main_vm = "VM_NAME_QCOW2_SPARSE_EXAMPLE"
                                    input_disk_image = "/DISK_IMAGE_PATH/${main_vm}.img"
                                - preallocated:
                                    input_allo_mode = "preallocated"
                                    main_vm = "VM_NAME_QCOW2_PREALLOCATEd_EXAMPLE"
                                    input_disk_image = "/DISK_IMAGE_PATH/${main_vm}.img"
                - libvirt:
                    input_mode = "libvirt"
                    variants:
                        - kvm:
                            # All VM defined on the test machine
                            hypervisor = "kvm"
                            variants:
                                - default:
                                    main_vm = "VM_NAME_KVM_EXAMPLE"
                                - virtioscis_disk:
                                    main_vm = "VM_NAME_KVM_VIRTIOSCSI_EXAMPLE"
                                - sata_disk:
                                    main_vm = "VM_NAME_KVM_SATA_EXAMPLE"
                                - multiple_disks:
                                    attach_disk_config = "yes"
                                    variants:
                                        - linux:
                                            os_type = "linux"
                                            added_disks_count = 5
                                            main_vm = "VM_NAME_KVM_LINUX_MULDISKS_EXAMPLE"
                                            vms = ${main_vm}
                                            vm_user = "root"
                                            vm_pwd = "123456"
                                        - windows:
                                            os_type = "windows"
                                            os_version = "win7"
                                            added_disks_count = 3
                                            main_vm = "VM_NAME_KVM_WIN_MULDISKS_EXAMPLE"
                                            vms = ${main_vm}
                                            shutdown_command = "shutdown /s /f /t 0"
                                            reboot_command = "shutdown /r /f /t 0"
                                            status_test_command = "echo %errorlevel%"
                                            shell_prompt = "^\w:\\.*>\s*$"
                                            shell_linesep = "\r\n"
                                            shell_client = "nc"
                                            shell_port = 10022
                                            file_transfer_client = "rss"
                                            file_transfer_port = 10023
                                            redirs += " file_transfer"
                                            guest_port_remote_shell = 10022
                                            guest_port_file_transfer = 10023
                                            rtc_base = "localtime"
                                            network_query = "ipconfig /all"
                                            restart_network = "ipconfig /renew"
                                            vm_user = "Administrator"
                                            vm_pwd = "123qweP"
                                            images_for_match = "WIN_IMAGES_FOR_MATCH"
                                - multiple_kernel:
                                    kernel_fm_url = "KERNEL_FIRMWARE_URL_EXAMPLE"
                                    kernel1_url = "KERNEL_URL_EXAMPLE"
                                    variants:
                                        - default:
                                            checkpoint = "multi_kernel"
                                        - vmlinuz_init:
                                            checkpoint = "vmlinuz_init"
                                        - debug_kernel:
                                            debug_kernel = 'yes'
                                            checkpoint = "debug_kernel"
                                - virtio:
                                    virtio = "yes"
                                    type += " vm_check"
                                    variants:
                                        - windows:
                                            os_type = "windows"
                                            shutdown_command = "shutdown /s /f /t 0"
                                            reboot_command = "shutdown /r /f /t 0"
                                            status_test_command = "echo %errorlevel%"
                                            shell_prompt = "^\w:\\.*>\s*$"
                                            shell_linesep = "\r\n"
                                            shell_client = "nc"
                                            shell_port = 10022
                                            file_transfer_client = "rss"
                                            file_transfer_port = 10023
                                            redirs += " file_transfer"
                                            guest_port_remote_shell = 10022
                                            guest_port_file_transfer = 10023
                                            rtc_base = "localtime"
                                            network_query = "ipconfig /all"
                                            restart_network = "ipconfig /renew"
                                            vm_user = "Administrator"
                                            vm_pwd = "123qweP"
                                            variants:
                                                - on:
                                                    checkpoint = "ctemp"
                                                    virtio_on = "yes"
                                                    os_version = "win2008"
                                                    main_vm = "Auto-kvm-win2008-virtio"
                                                    images_for_match = "WIN2008_IMAGES_FOR_MATCH"
                                                - off:
                                                    virtio_on = "no"
                                                    os_version = "win7"
                                                    main_vm = "kvm-win7-x86_64"
                                                    images_for_match = "WIN7_IMAGES_FOR_MATCH"
                                        - linux:
                                            os_type = "linux"
                                            checkpoint = "virtio"
                                            variants:
                                                - on:
                                                    virtio_on = "yes"
                                                - off:
                                                    virtio_on = "no"
                                - noyumrepo-rhn:
                                    checkpoint = "noyumrepo-rhn"
                                    main_vm = "VM_NOYUMREPO_RHN_EXAMPLE"
                                - kdump:
                                    checkpoint = "kdump"
                                    main_vm = "VM_KDUMP_EXAMPLE"
                                - floppy:
                                    checkpoint = "floppy"
                                    img_path = "/var/lib/libvirt/images"
                                - floppy_devmap:
                                    checkpoint = "floppy_devmap"
                                    img_path = "/var/lib/libvirt/images"
                                - fstab:
                                    variants:
                                        - cdrom:
                                            checkpoint = "fstab_cdrom"
                                            img_path = "/var/lib/libvirt/images"
                                        - label:
                                            checkpoint = "fstab_label"
                                        - uuid:
                                            checkpoint = "fstab_uuid"
                                        - virtio:
                                            checkpoint = "fstab_virtio"
                                - corrupt_rpmdb:
                                    checkpoint = "corrupt_rpmdb"
                                - bogus_kernel:
                                    checkpoint = "bogus_kernel"
                                - unclean_fs:
                                    checkpoint = "unclean_fs"
                                    main_vm = "VM_WIN8_UNCLEAN_EXAMPLE"

                        - xen:
                            hypervisor = "xen"
                            remote_host = ${xen_hostname}
                            xen_host_user = "root"
                            xen_host_passwd = "redhat"
                            main_vm = "VM_NAME_XEN_EXAMPLE"
                            default_output_format = "qcow2"
                        - esx:
                            hypervisor = "esx"
                            variants:
                                - esx_51:
                                    remote_host = ${vpx51_hostname}
                                    vpx_dc = ${vpx51_dc}
                                    esx_ip = ${esx51_hostname}
                                    vpx_passwd = "VPX51_PASSWORD"
                                - esx_55:
                                    remote_host = ${vpx55_hostname}
                                    vpx_dc = ${vpx55_dc}
                                    esx_ip = ${esx55_hostname}
                                    vpx_passwd = "VPX55_PASSWORD"
                                - esx_60:
                                    remote_host = ${vpx60_hostname}
                                    vpx_dc = ${vpx60_dc}
                                    esx_ip = ${esx60_hostname}
                                    vpx_passwd = "VPX60_PASSWORD"
                            variants:
                                - default:
                                    only esx_60
                                    main_vm = "VM_NAME_ESX_EXAMPLE"
                                - with_cdrom:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_CDROM_EXAMPLE"
                                - migrated_vm:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_MIGRATED_EXAMPLE"
                                - local_storage:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_LOCALSTORAGE_EXAMPLE"
                                - multiple_disks:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_MULDISKS_EXAMPLE"
                                - multiple_cpus:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_MULCPUS_EXAMPLE"
                                - with_snapshot:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_SNAPSHOT_EXAMPLE"
                                - special_name:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_SPECIALNAME_EXAMPLE"
                                - cloned_vm:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_CLONED_EXAMPLE"
                                - esx_template:
                                    only esx_55
                                    main_vm = "VM_NAME_ESX_TEMPLATE_EXAMPLE"
                - libvirtxml:
                    # No test yet
                    input_mode = "libvirtxml"
                - ova:
                    # No test yet
                    input_mode = "ova"
                    variants:
                        -default:
                            checkpoint = "ova_default"
                            input_ova_file = "OVA_BUG_1164853_EXAMPLE"
                            new_name = "bug_1164853"
                            main_vm = ${new_name}
                            v2v_options += " -of raw"
                        - parent_ctrl:
                            checkpoint = "parent_ctrl"
                            input_ova_file = "OVA_BUG_1167302_EXAMPLE"
                            new_name = "bug_1167302"
                            main_vm = ${new_name}
                            v2v_options += " -of raw"
                        - win2008r2_ostk:
                            checkpoint = "win2008r2_ostk"
                            input_ova_file = "OVA_BUG_1161333_EXAMPLE"
                            new_name = "bug_1161333"
                            main_vm = ${new_name}
                            image_to_match = "BSOD_IMAGE_FOR_MATCH"
                            v2v_timeout = 1800
                            v2v_options += " -of raw"

                - none:
    variants:
        - positive_test:
            status_error = "no"
            variants:
                - option_version:
                    only input_mode.none
                    only output_mode.none
                    v2v_options = "--version"
                - option_vmtype:
                    # Set vmtype (for RHEV)
                    only input_mode.libvirt.xen
                    only output_mode.rhev
                    variants:
                        - desktop:
                            vmtype = "desktop"
                            v2v_options = "--vmtype ${vmtype}"
                        - server:
                            vmtype = "server"
                            v2v_options = "--vmtype ${vmtype}"
                - option_oa:
                    # Set output allocation mode
                    only input_mode.libvirt.xen
                    only output_mode.libvirt
                    variants:
                        - sparse:
                            oa_mode = "sparse"
                            v2v_options = "-oa ${oa_mode}"
                        - preallocated:
                            oa_mode = "preallocated"
                            v2v_options = "-oa ${oa_mode}"
                - option_of:
                    # Set output format
                    only input_mode.disk
                    only output_mode.libvirt
                    variants:
                        - raw_format:
                            output_format = "raw"
                        - qcow2_format:
                            output_format = "qcow2"
                    variants:
                        - sparse:
                            output_allo_mode = "sparse"
                        - preallocated:
                            output_allo_mode = "preallocated"
                - option_on:
                    # Rename guest when converting
                    only input_mode.libvirt.xen
                    only output_mode.libvirt
                    new_vm_name = "${main_vm}-new"
                    v2v_options = "-on ${new_vm_name}"
                - option_no-copy:
                    # Don't copy the disk, just write the metadata
                    only input_mode.libvirt.xen
                    only output_mode.local
                    v2v_options = "--no-copy"
                - option_ic:
                    # input libvirt URI
                    only input_mode.libvirt.xen,input_mode.libvirt.esx
                    only output_mode.libvirt
                - option_oc:
                    # output libvirt URI
                    only input_mode.disk.qcow2_format.sparse
                    only output_mode.libvirt
                    variants:
                        - privileged:
                            oc_uri = "qemu:///system"
                            v2v_options = "-oc ${oc_uri}"
                        - unprivileged:
                            oc_uri = "qemu:///session"
                            v2v_options = "-oc ${oc_uri}"
                            unprivileged_user = "USER.EXAMPLE"
                - option_vdsm:
                    # Set the output method to vdsm
                    # And create a fake storage domain to test BZ#1176591
                    only input_mode.libvirt.kvm.default
                    only output_mode.vdsm
                    export_domain_uuid = "EXPORT_DOMAIN_UUDI_EXAMPLE"
                    fake_domain_uuid = "12345678-1234-1234-1234-123456789000"
                    vdsm_image_uuid = "12345678-1234-1234-1234-123456789001"
                    vdsm_vol_uuid = "12345678-1234-1234-1234-123456789002"
                    vdsm_vm_uuid = "12345678-1234-1234-1234-123456789003"
                    output_storage = ${mount_point}/${export_domain_uuid}
                    vdsm_ovf_output = "${output_storage}/master/vms/${vdsm_vm_uuid}"
                - specific_vm:
                    # Convert specific VM to rhev
                    only input_mode.libvirt
                    no input_mode.libvirt.kvm.default
                    no input_mode.libvirt.kvm.unclean_fs
                    no input_mode.libvirt.xen
                    only output_mode.rhev
                - ova_test:
                    only input_mode.ova
                    only output_mode.libvirt
                - xen_test:
                    #check_xen_warning = "yes"
                    variants:
                        - vmcheck:
                            type += " vm_check"
                            variants:
                                - from_disk:
                                    only input_mode.none
                                    only output_mode.libvirt
                                    checkpoint = "xvda_disk"
                                    main_vm = "VM_XVDA_DISK_EXAMPLE"
                                    remote_disk_image = "/var/lib/xen/images/${main_vm}.img"
                                    input_disk_image = "/tmp/${main_vm}.img"
                                    v2v_options = "-i disk ${input_disk_image}"
                                - from_serv:
                                    only input_mode.libvirt.xen
                                    only output_mode.libvirt
                                    checkpoint = "xvda_xen"
                                    main_vm = "VM_XVDA_EXAMPLE"
                        - multiconsole:
                            only input_mode.libvirt.xen
                            only output_mode.rhev
                            checkpoint = "multiconsole"
                            main_vm = "VM_MULTICONSOLE_EXAMPLE"
                        - uuid:
                            only input_mode.libvirt.xen
                            only output_mode.libvirt
                            main_vm = "VM_UUID_EXAMPLE"
                            variants:
                                - guest:
                                    checkpoint = "xen_uuid"
                                - pool:
                                    checkpoint = "pool_uuid"
                        - console_xvc0:
                            only input_mode.libvirt.xen
                            only output_mode.rhev
                            main_vm = "VM_XVC0_EXAMPLE"
                            checkpoint = "console_xvc0"
                        - windows:
                            os_type = "windows"
                            shutdown_command = "shutdown /s /f /t 0"
                            reboot_command = "shutdown /r /f /t 0"
                            status_test_command = "echo %errorlevel%"
                            shell_prompt = "^\w:\\.*>\s*$"
                            shell_linesep = "\r\n"
                            shell_client = "nc"
                            shell_port = 10022
                            file_transfer_client = "rss"
                            file_transfer_port = 10023
                            redirs += " file_transfer"
                            guest_port_remote_shell = 10022
                            guest_port_file_transfer = 10023
                            rtc_base = "localtime"
                            network_query = "ipconfig /all"
                            restart_network = "ipconfig /renew"
                            vm_user = "Administrator"
                            vm_pwd = "123qweP"
                            images_for_match = "/home/chloe/v/match_images/win2003-0.ppm,/home/chloe/v/match_images/win2003-1.ppm,/home/chloe/v/match_images/win2003-2.ppm,/home/chloe/v/match_images/win2003-3.ppm"
                            variants:
                                - default_install:
                                    only input_mode.libvirt.xen
                                    only output_mode.libvirt
                                    type += " vm_check"
                                    windows_path = "LINUX"
                                    os_version = "win2003"
                                    main_vm = "VM_ROOTLINUX_EXAMPLE"
                                - kvm_rhev_file:
                                    only input_mode.libvirt.xen
                                    only output_mode.libvirt
                                    checkpoint = "kvm_rhev_file"
                                    os_version = "win2003"
                                    main_vm = "VM_RHEV_FILES_EXAMPLE"

        - negative_test:
            status_error = "yes"
            variants:
                - conflict_options:
                    only input_mode.none
                    only output_mode.none
                    variants:
                        - 2_i:
                            v2v_options = "-i libvirt -i disk"
                        - 2_o:
                            v2v_options = "-i disk -o local -o local"
                - not_shutdown:
                    only input_mode.libvirt.kvm.default
                    only output_mode.local
                    variants:
                        - running:
                            vm_state = "running"
                            checkpoint = ${vm_state}
                        - paused:
                            vm_state = "paused"
                            checkpoint = ${vm_state}
                - serial_terminal:
                    only input_mode.libvirt.kvm.default
                    only output_mode.rhev
                    checkpoint = "serial_terminal"
                - no_space:
                    only input_mode.libvirt.kvm.default
                    only output_mode.rhev
                    checkpoint = "no_space"
                - unclean_fs:
                    only input_mode.libvirt.kvm.unclean_fs
                    only output_mode.rhev

