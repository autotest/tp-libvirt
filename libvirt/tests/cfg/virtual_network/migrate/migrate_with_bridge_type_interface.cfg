- virtual_network.migrate.migrate_with_bridge_type_interface:
    type = migrate_with_bridge_type_interface
    start_vm = "no"
    take_regular_screendumps = no
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    nfs_mount_dir = "/var/lib/libvirt/migrate"
    nfs_mount_options = "soft,timeo=50,retrans=3"
    virsh_migrate_dest_state = running
    virsh_migrate_options = "--live --p2p --verbose"
    virsh_migrate_connect_uri = "qemu:///system"
    outside_ip = "www.google.com"
    migration_setup = "yes"
    iface_model = "virtio"
    iface_queues = "5"
    new_queues = "3"
    ssh_remote_auth = True
    unprivileged_user = ""
    mnt_path_name = ${nfs_mount_dir}
    nfs_server_ip = "${migrate_source_host}"
    migrate_desturi_port = "22"
    migrate_desturi_type = "ssh"
    virsh_migrate_desturi = "qemu+ssh://${migrate_dest_host}/system"
    vm_ping_outside = "pass"
    expected_xpath = [{'element_attrs': ["//interface/driver[@queues='${iface_queues}']"]}]
    check_network_accessibility_after_mig = "yes"
    variants:
        - linux_bridge:
            bridge_type = "linux"
            iface_type = "bridge"
            bridge_name = "br0"
            iface_dict = {'source': {'bridge': '${bridge_name}'},'type_name':'${iface_type}', 'model':'${iface_model}', 'driver': {'driver_attr': {'queues': '${iface_queues}'}}}
        - ovs_bridge:
            bridge_type = "ovs"
            ovs_bridge_name = "ovsbr0"
            net_name = 'ovs-net'
            network_dict = {'bridge': {'name': '${ovs_bridge_name}'}, 'forward': {'mode': 'bridge'}, 'name': '${net_name}', 'virtualport_type': 'openvswitch'}
            iface_type = "network"
            iface_dict = {'type_name':'${iface_type}', 'source': {'network': '${net_name}'}, 'model':'${iface_model}', 'driver': {'driver_attr': {'queues': '${iface_queues}'}}}
    variants:
        - precopy_migration:
            migration_type = "precopy"
            virsh_migrate_extra = ""
            migrate_vm_back = "yes"
        - postcopy_migration:
            migration_type = "postcopy"
            virsh_migrate_extra = "--postcopy"
        - cancel_migration:
            migration_type = "cancel"
            cancel_migration = "yes"
            status_error = "yes"
            err_msg = "operation aborted: migration out job: canceled by client|operation aborted: job 'migration out' canceled by client"
            virsh_migrate_extra = "--bandwidth 10"
            action_during_mig = '[{"func": "virsh.domjobabort", "after_event": "iteration: '1'", "func_param": "'%s' % params.get('migrate_main_vm')"}]'
    variants:
        - start_with_interface:
            interface_timing = "start"
        - hotplug_interface:
            interface_timing = "hotplug"
            hotplug = "yes"
            attach_interface = "yes"
