- virsh.attach_device:
    type = virsh_attach_device
    # Whether or not the virsh command should fail
    status_error = "no"
    # input_xml prefix (used in error testing)
    vadu_device_xml_prefix = ""
    # Use argument options or positional parameters
    variants:
        - domain_positional:
            vadu_domain_positional = "yes"
        - domain_argument:
            vadu_domain_positional = "no"
    variants:
        - file_positional:
            vadu_file_positional = "yes"
        - file_argument:
            vadu_file_positional = "no"
    # Normal / error variations
    variants:
        - normal_test:
            # Functional check should work before rebooting
            vadu_preboot_function_error = "no"
            # Functional check should work after rebooting
            vadu_pstboot_function_error = "no"
            # Domain ID cannot be retrieved when shutoff
            no cold_attach_cold_vm..id_ref
            # No --config by default
            vadu_config_option = "no"
            # domain reference method variations
            variants:
                - name_ref:
                    # method to reference domain
                    vadu_dom_ref = "name"
                - id_ref:
                    vadu_dom_ref = "id"
                - uuid_ref:
                    vadu_dom_ref = "uuid"
            # VM State & --config option specification
            variants:
                - hot_attach_hot_vm:
                    start_vm = "yes"
                    variants:
                        - persistent:
                            vadu_extra = "--persistent"
                        - live_config:
                            # Avoid driver-dependant default behavior
                            vadu_extra = "--live"
                            vadu_config_option = "yes"
                - hot_attach_hot_vm_current:
                    start_vm = "yes"
                    vadu_extra = "--current"
                    # Functional check should fail after rebooting
                    vadu_pstboot_function_error = "yes"
                - cold_attach_cold_vm:
                    start_vm = "no"
                    vadu_config_option = "yes"
                    # Functional check should fail before rebooting
                    vadu_preboot_function_error = "yes"
                    variants:
                        - persistent:
                            vadu_extra = "--persistent"
                            vadu_config_option = "no"
                        - config:
                            vadu_config_option = "yes"
                - cold_attach_hot_vm:
                    start_vm = "yes"
                    vadu_config_option = "yes"
                    # Functional check should fail before rebooting
                    vadu_preboot_function_error = "yes"
        - error_test:
            status_error = "yes"
            # Functional check should fail before rebooting
            vadu_preboot_function_error = "yes"
            # Functional check should fail after rebooting
            vadu_pstboot_function_error = "yes"
            variants:
                - empty_file_string:
                    vadu_file_ref = "empty"
                - missing_file:
                    vadu_file_ref = "missing"
                - no_file:
                    vadu_file_ref = "none"
                - no_name:
                    vadu_dom_ref = "none"
                - empty_name_string:
                    vadu_dom_value = "''"
                - hex_id_option:
                    vadu_dom_ref = "bad_domain_hex"
                    # vadu_dom_value set in test
                - invalid_id_option:
                    vadu_dom_value = 9999
                - unexpect_option:
                    vadu_dom_value = "\#"
                - invalid_uuid_option:
                    vadu_dom_value = "99999999-9999-9999-9999-999999999999"
                - extra_value:
                    # Extra unexpected parameters to virsh command
                    vadu_extra = "xyz"
                - extra_parameter:
                    vadu_extra = "--foobar"
                - help_parameter:
                    # display help but take no action
                    vadu_extra = "--help"
                - hot_attach_cold_vm:
                    # hot-attach to cold VM
                    start_vm = "no"
                - cold_attach_id_ref:
                    start_vm = "no"
                    vadu_dom_ref = "id"
                - invalid_disk_type:
                    only single_virtio_file
                    only file_positional
                    only domain_positional
                    vadu_dev_obj_devtype_VirtualDiskBasic = "xyz"
                - unsupport_ide_bus:
                    only single_file
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "ide"
                - unsupport_sata_bus:
                    only single_file
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "sata"

    ########## Device type and parameter specification #########
    # Arbitrary attributes can be passed in to class instances #
    # With the format: "vadu_dev_obj_<attr>_<class> = <value>" #
    # See virttest/utils_test.py:VADUTestHelpers namespace.    #
    # N/B: Not all dev types + host cfg support hot-attaches   #
    ############################################################

    # test-defined device class names (defined in test module)
    vadu_dev_objs = ""

    # Number of each device class to test
    vadu_dev_obj_count = 1

    variants:
        - character:
            variants:
                - serial:
                    # Hot attach serial not supported (ISA bus limitation)
                    no normal_test.hot_attach_hot_vm
                    no normal_test.hot_attach_hot_vm_current
                    variants:
                        - single_serial:
                            # SerialFile is name of class in test-module
                            vadu_dev_objs = "SerialPipe"
                            # vadu_dev_obj_count_SerialPipe inherited as 1
                        - multi_serial:
                            vadu_dev_objs = "SerialFile"
                            vadu_dev_obj_count_SerialFile = 3
                        - multi_type:
                            vadu_dev_objs = "SerialFile SerialPipe"
                            vadu_dev_obj_count_SerialFile = 1
                            # vadu_dev_obj_source_sfile ingerited as file
                            vadu_dev_obj_count_SerialPipe = 2
                - console:
                    vadu_dev_objs = "Console"
                    variants:
                        - type_pty:
                            vadu_dev_obj_type_Console = "pty"
                            vadu_dev_obj_targettype_Console = "virtio"
                - channel:
                    vadu_dev_objs = "Channel"
                    vadu_dev_obj_targettype_Channel = "virtio"
                    vadu_dev_obj_targetname_Channel = "virt-test.unix.channel"
                    variants:
                        - type_pty:
                            vadu_dev_obj_type_Channel = "pty"
                        - type_unix:
                            vadu_dev_obj_type_Channel = "unix"
                            vadu_dev_obj_sourcemode_Channel = "bind"
                            vadu_dev_obj_sourcepath_Channel = "/var/lib/libvirt/qemu/virt-test.attach_device.test_channel"
        - controller:
            vadu_dev_objs = "Controller"
            variants:
                - type_scsi:
                    vadu_dev_obj_type_Controller = "scsi"
                    vadu_dev_obj_model_Controller = "virtio-scsi"
        - block:
            vadu_dev_objs = "VirtualDiskBasic"
            variants:
                - single_file:
                    only error_test
                    vadu_dev_obj_meg_VirtualDiskBasic = 100
                    vadu_dev_obj_devidx_VirtualDiskBasic = 1
                - single_virtio_file:
                    vadu_dev_obj_meg_VirtualDiskBasic = 100
                    vadu_dev_obj_devidx_VirtualDiskBasic = 1
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "virtio"
                    # 0th disk is /dev/vda
                - single_usb_file:
                    vadu_dev_obj_meg_VirtualDiskBasic = 10
                    vadu_dev_obj_devidx_VirtualDiskBasic = 0
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "usb"
                - single_scsi_file:
                    # attach scsi disk need scsi controller exist
                    # so vadu_dev_objs has two classes to attach
                    vadu_dev_objs = "Controller VirtualDiskBasic"
                    vadu_dev_obj_type_Controller = "scsi"
                    vadu_dev_obj_model_Controller = "virtio-scsi"
                    vadu_dev_obj_meg_VirtualDiskBasic = 10
                    vadu_dev_obj_devidx_VirtualDiskBasic = 0
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "scsi"
                - multi_virtio_file:
                    # Avoid running out of PCI slots on hot-attach
                    vadu_dev_obj_count_VirtualDiskBasic = 16
                    vadu_dev_obj_meg_VirtualDiskBasic = 10
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "virtio"
        - multiple:
            variants:
                - VirtualDiskBasic_SerialFile_SerialPipe:
                    # Hot attach serial not supported (ISA bus limitation)
                    no normal_test.hot_attach_hot_vm
                    no normal_test.hot_attach_hot_vm_current
                    vadu_dev_objs = "VirtualDiskBasic SerialFile SerialPipe"
                    vadu_dev_obj_count_VirtualDiskBasic = 3
                    vadu_dev_obj_count_SerialFile = 2
                    vadu_dev_obj_count_SerialPipe = 1
                    vadu_dev_obj_meg_VirtualDiskBasic = 100
                    vadu_dev_obj_devidx_VirtualDiskBasic = 1
                    vadu_dev_obj_targetbus_VirtualDiskBasic = "virtio"
