- virsh.remote_with_ssh:
    type = remote_access
    main_vm = ""
    take_regular_screendumps = no
    # please replace your configuration
    server_ip = ${remote_ip}
    server_user = ${remote_user}
    server_pwd = ${remote_pwd}
    client_ip = ${local_ip}
    client_user = root
    client_pwd = ${local_pwd}
    transport = "ssh"
    port = "22"
    client = "ssh"
    start_vm = "no"
    ssh_port = "${port}"
    variants:
        - positive_testing:
            status_error = "no"
            variants:
                - ssh_diff_libvirt_version:
                    diff_virt_ver = "yes"
                    # please change query command based on your
                    # Linux distribution
                    query_cmd = "rpm -q libvirt"
                - ssh_ipv4:
                - ssh_static_ipv6:
                    # no problem, the test codes will automatically
                    # clean up created static IPv6 configuration
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                    # change your network interface name, e.g. eth0, enp0s25
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                - gssapi_auth:
                    extra_env = "KRB5CCNAME=libvirt_krb_test"
                    filter_pattern = ".*${extra_env}.*ssh.*${server_ip}.*libvirt-sock.*"
                    log_level= "LIBVIRT_DEBUG=1"
                - test_uri_with_default_user:
                    test_driver = "test"
                    uri_path = "/default"
                    auth_pwd = "${client_pwd}"
                    no_any_config = "yes"
                - test_uri_with_root_user:
                    test_driver = "test"
                    uri_path = "root@${server_ip}/default"
                    auth_pwd = "${server_pwd}"
                    no_any_config = "yes"
                - xen_uri_with_default_user:
                    test_driver = "xen"
                    uri_path = "ENTER.YOUR.REMOTE.XEN.EXAMPLE.COM"
                    auth_pwd = "ENTER.YOUR.REMOTE.XEN.PASSWORD"
                    no_any_config = "yes"
                - xen_uri_with_root_user:
                    test_driver = "xen"
                    uri_path = "root@ENTER.YOUR.REMOTE.XEN.EXAMPLE.COM"
                    auth_pwd = "ENTER.YOUR.REMOTE.XEN.PASSWORD"
                    no_any_config = "yes"
                # this is simple cases for esx w/o SSH transport
                - esx_uri_with_default_user:
                    transport = ""
                    test_driver = "esx"
                    conn_plus = ""
                    uri_path = "ENTER.YOUR.REMOTE.ESX.EXAMPLE.COM/?no_verify=1"
                    auth_user = "root"
                    auth_pwd = "ENTER.YOUR.REMOTE.ESX.PASSWORD"
                    no_any_config = "yes"
                - esx_uri_with_root_user:
                    transport = ""
                    test_driver = "esx"
                    conn_plus = ""
                    uri_path = "root@ENTER.YOUR.REMOTE.ESX.EXAMPLE.COM/?no_verify=1"
                    auth_pwd = "ENTER.YOUR.REMOTE.ESX.PASSWORD"
                    no_any_config = "yes"
        - negative_testing:
            status_error = "yes"
            variants:
                - libssh2_no_auth:
                    transport = "libssh2"
                - ssh_no_uri_path:
                    uri_path = ""
                - ssh_read_only_mode:
                    read_only = "-r"
                    virsh_cmd = "start"
                    # VM is on remote host, so don't need to deal with it on the local
                    not_preprocess = yes
                    # you need to define a VM naming 'avocado-vt-vm1' on remote test host
                    # no problem, the test codes will help you check it.
                    main_vm = "avocado-vt-vm1"
                - ssh_no_ipv6_config:
                    config_ipv6 = "no"
                    ipv6_addr_des = "None"
                - stop_libvirtd:
                    restart_libvirtd = "no"
                    libvirtd_action = "stop"
                - incorrect_password:
                    auth_pwd = "INVALID_PASSWORD"
                - ipv4_with_readonly:
                    read_only = "-r"
                    virsh_cmd = "start"
                    # VM is on remote host, so don't need to deal with it on the local
                    not_preprocess = yes
                    # you need to define a VM naming 'avocado-vt-vm1' on remote test host
                    # no problem, the test codes will help you check it.
                    main_vm = "avocado-vt-vm1"
                    patterns_virsh_cmd = ".*Domain\s*${main_vm}\s*started.*"
                - ipv6_with_readonly:
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                    listen_addr = "${ipv6_addr_des}"
                    read_only = "-r"
                    virsh_cmd = "start"
                    # VM is on remote host, so don't need to deal with it on the local
                    not_preprocess = yes
                    # you need to define a VM naming 'avocado-vt-vm1' on remote test host
                    # no problem, the test codes will help you check it.
                    main_vm = "avocado-vt-vm1"
                    patterns_virsh_cmd = ".*Domain\s*${main_vm}\s*started.*"
