- virsh.remote_with_tls:
    type = remote_access
    main_vm = ""
    take_regular_screendumps = "no"
    transport = "tls"
    server_ip = ${remote_ip}
    server_user = ${remote_user}
    server_pwd = ${remote_pwd}
    client_ip = ${local_ip}
    client_user = root
    client_pwd = ${local_pwd}
    start_vm = "no"
    port = "22"
    client = "ssh"
    tls_port = "16514"
    # please change these with your hostname
    server_cn = "ENTER.YOUR.SERVER.HOSTNAME"
    client_cn = "ENTER.YOUR.CLIENT.HOSTNAME"
    variants:
        - positive_testing:
            status_error = "no"
            variants:
                - sasl:
                    auth_tls = "sasl"
                    variants:
                        - digest_md5:
                            sasl_type = "digest-md5"
                            sasl_user_pwd = "('test', '123456'),"
                            sasl_allowed_users = ['test']
                        - gssapi:
                            sasl_type = "gssapi"
                    variants:
                        - allow_one_sasl_user:
                        - allow_sasl_users:
                            only digest_md5
                            # e.g. ('$SASL_USER', '$SASL_PASSWD')
                            sasl_user_pwd = "('test', '123456'), ('libvirt', '123456')"
                            sasl_allowed_users = ['test', 'libvirt']
                        - customized_ipv4_listen_address_with_sasl_auth:
                            listen_addr = "${server_ip}"
                        - customized_ipv6_listen_address_with_sasl_auth:
                            config_ipv6 = "yes"
                            ip_addr_suffix = 64
                            # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                            ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                            ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                            # change your network interface name, e.g. eth0, enp0s25
                            client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                            client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                            server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                            server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                            listen_addr = "${ipv6_addr_des}"
                            server_cn = "${ipv6_addr_des}"
                            client_cn = "${ipv6_addr_src}"
                - default_tls_port_and_auth_tls:
                - no_verify_certificate:
                    tls_verify_cert = "no"
                    # please change your configuration
                    remove_client_key_cmd = "rm -rf /etc/pki/libvirt/private/clientkey.pem"
                    remove_client_cert_cmd = "rm -rf  /etc/pki/libvirt/clientcert.pem"
                - no_sanity_checks_and_no_verify:
                    sasl_type = "digest-md5"
                    tls_sanity_cert = "no"
                    # please change your configuration
                    ca_cn_new = "illegal-sign"
                    no_verify = "yes"
                - customized_tls_port:
                    tls_port = "16515"
                - allowed_dn_list:
                    tls_allowed_dn_list = "CN=${client_cn},O=AUTOTEST.VIRT"
                    tls_port = "16515"
                - customized_ipv4_listen_address:
                    listen_addr = "${server_ip}"
                    server_cn = "${server_ip}"
                    client_cn = "${client_ip}"
                - customized_ipv6_listen_address:
                    # no problem, the test codes will automatically
                    # clean up created static IPv6 configuration
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                    # change your network interface name, e.g. eth0, enp0s25
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                    listen_addr = "${ipv6_addr_des}"
                    server_cn = "${ipv6_addr_des}"
                    client_cn = "${ipv6_addr_src}"
                - customized_ipv6_tls_port:
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                    # change your network interface name, e.g. eth0, enp0s25
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                    listen_addr = "${ipv6_addr_des}"
                    server_cn = "${ipv6_addr_des}"
                    client_cn = "${ipv6_addr_src}"
                    tls_port = "16515"
                - customized_x509_cert_path:
                    custom_pki_path = "/tmp/ca"
        - negative_testing:
            status_error = "yes"
            variants:
                - only_simpy_connect_libvirtd:
                    no_any_config = "yes"
                - invalid_tls_port:
                    tls_port = "120abcXYZ!@#$%^"
                    # if 'restart_libvirtd == "no"' then libvirt daemon isn't
                    # automatically restarted after configuring in
                    # TLSConnection.server_setup() from utils_conn.py, we need
                    # to do this by test cases instead
                    restart_libvirtd = "no"
                - tls_port_in_use:
                    tls_port = "22"
                    restart_libvirtd = "no"
                - tls_listen_addr_in_use:
                    listen_addr = "127.0.0.1"
                    restart_libvirtd = "no"
                - ipv4_with_allowed_sasl_user_readonly:
                    auth_tls = "sasl"
                    sasl_type = "digest-md5"
                    sasl_user_pwd = "('test', '123456'),"
                    sasl_allowed_users = ['test']
                    read_only = "-r"
                    virsh_cmd = "start"
                    # VM is on remote host, so don't need to deal with it on the local
                    not_preprocess = yes
                    # you need to define a VM naming 'avocado-vt-vm1' on remote test host
                    # no problem, the test codes will help you check it.
                    main_vm = "avocado-vt-vm1"
                - no_sanity_checks_without_no_verify:
                    tls_sanity_cert = "no"
                    # please change your configuration
                    ca_cn_new = "illegal-sign"
                - allowed_dn_disorder_list:
                    tls_allowed_dn_list = "O=AUTOTEST.VIRT,CN=${client_cn}"
                    tls_port = "16515"
                - allowed_dn_list_with_invalid_organization:
                    tls_allowed_dn_list = "CN=${client_cn},O=120abcXYZ!@#$%^&*()"
                    tls_port = "16515"
                - allowed_dn_list_with_invalid_CN:
                    tls_allowed_dn_list = "CN=120abcXYZ!@#$%^&*(),O=AUTOTEST.VIRT"
                    tls_port = "16515"
                - verify_certificate:
                    tls_verify_cert = "yes"
                    # please change your configuration
                    remove_client_key_cmd = "rm -rf /etc/pki/libvirt/private/clientkey.pem"
                    remove_client_cert_cmd = "rm -rf  /etc/pki/libvirt/clientcert.pem"
                - incorrect_ipv4_listen_address:
                    listen_addr = "12.34.56.78"
                    server_cn = "${server_ip}"
                    client_cn = "${client_ip}"
                    restart_libvirtd = "no"
                - ipv6_with_readonly:
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "ENTER.YOUR.IPv6.TRAGET"
                    # change your network interface name, e.g. eth0, enp0s25
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                    listen_addr = "${ipv6_addr_des}"
                    server_cn = "${ipv6_addr_des}"
                    client_cn = "${ipv6_addr_src}"
                    read_only = "-r"
                    virsh_cmd = "start"
                    # VM is on remote host, so don't need to deal with it on the local
                    not_preprocess = yes
                    # you need to define a VM naming 'avocado-vt-vm1' on remote test host
                    # no problem, the test codes will help you check it.
                    main_vm = "avocado-vt-vm1"
                    patterns_virsh_cmd = ".*Domain\s*${main_vm}\s*started.*"
                - ipv6_address_unreachable:
                    config_ipv6 = "yes"
                    ip_addr_suffix = 64
                    # e.g. ipv6_addr_src = "3fef::101", ipv6_addr_des = "3fef::102"
                    ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                    ipv6_addr_des = "3fef::102"
                    # change your network interface name, e.g. eth0, enp0s25
                    client_ifname = "ENTER.YOUR.CLIENT.IFACE.NAME"
                    client_ipv6_addr = "${ipv6_addr_src}/${ip_addr_suffix}"
                    server_ifname = "ENTER.YOUR.SERVER.IFACE.NAME"
                    server_ipv6_addr = "${ipv6_addr_des}/${ip_addr_suffix}"
                    check_ipv6_connectivity = "no"
                    listen_addr = "${ipv6_addr_des}"
                    server_cn = "${ipv6_addr_des}"
                    client_cn = "${ipv6_addr_src}"
                    tls_port = "16515"
