- vIOMMU.migration.iommu_device:
    type = migration_iommu_device
    # Migrating non-started VM causes undefined behavior
    start_vm = yes
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Options to pass to virsh migrate command before <domain> <desturi>
    virsh_migrate_options = ""
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ""
    # SSH connection time out
    ssh_timeout = 60
    migration_setup = "yes"
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    image_convert = 'no'
    virsh_migrate_dest_state = "running"
    virsh_migrate_src_state = "shut off"
    virsh_migrate_options = "--p2p --live --verbose  --persistent"
    virsh_migrate_desturi = "qemu+ssh://${migrate_dest_host}/system"
    virsh_migrate_connect_uri = "qemu:///system"
    check_network_accessibility_after_mig = "yes"
    check_cont_ping = "yes"
    disk_driver = {'name': 'qemu', 'type': 'qcow2', 'iommu': 'on'}
    variants:
        - virtio:
            only q35, aarch64
            func_supported_since_libvirt_ver = (8, 3, 0)
            iommu_dict = {'model': 'virtio'}
        - intel:
            only q35
            start_vm = "yes"
            enable_guest_iommu = "yes"
            iommu_dict = {'model': 'intel', 'driver': {'intremap': 'on', 'caching_mode': 'on', 'eim': 'on', 'iotlb': 'on', 'aw_bits': '48'}}
        - smmuv3:
            only aarch64
            func_supported_since_libvirt_ver = (5, 5, 0)
            iommu_dict = {'model': 'smmuv3'}
    variants:
        - virtio_muti_devices:
            disk_dict = {'target': {'dev': 'vda', 'bus': 'virtio'}, 'device': 'disk', 'driver': ${disk_driver}}
            video_dict = {'primary': 'yes', 'model_heads': '1', 'model_type': 'virtio', 'driver': {'iommu': 'on'}}
            variants:
                - vhost_on:
                    interface_driver_name = "vhost"
                - vhost_off:
                    interface_driver_name = "qemu"
            interface_driver = {'driver_attr': {'name': '${interface_driver_name}', 'iommu': 'on'}}
            iface_dict = {'type_name': 'network', 'model': 'virtio', 'driver': ${interface_driver}, 'source': {'network': 'default'}}
        - scsi_controller:
            controller_dicts = [{'type': 'scsi', 'model': 'virtio-scsi','driver': {'iommu': 'on'}}]
            disk_dict = {'target': {'dev': 'sda', 'bus': 'scsi'}}
            cleanup_ifaces = no
