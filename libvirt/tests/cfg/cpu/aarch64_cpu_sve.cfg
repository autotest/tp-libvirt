- aarch64_cpu_sve:
    type = aarch64_cpu_sve
    start_vm = "no"
    check_cmd_lscpu = "which lscpu"
    check_sve = "lscpu  | grep sve"
    check_sve_config = ["grep CONFIG_ARM64_SVE=y /boot/config-%s", "grep CONFIG_ARM64_SVE=y /lib/modules/%s/config"]
    get_maximum_sve_length = "dmesg | grep 'SVE: maximum available vector length'"
    cpu_xml_policy = "require"
    cpu_xml_mode = "host-passthrough"
    only aarch64
    variants:
        - boot_test:
            status_error = "no"
            variants:
                - enable_sve:
                - disable_sve:
                    cpu_xml_policy = "disable"
                    expect_sve = "no"
        - with_vector_length:
            variants:
                - valid_length:
                    status_error = "no"
                    variants:
                        - 128:
                            vector_length = "sve128"
                        - 256:
                            vector_length = "sve256"
                        - 512:
                            vector_length = "sve512"
                        - all_supported_lengths:
                            all_supports = "yes"
                - invalid_length:
                    status_error = "yes"
                    vector_length = "sve1234"
                    expect_msg = "unsupported configuration: unknown CPU feature: sve1234"
                - conflict_length:
                    status_error = "yes"
                    vector_length_list = '[{"sve":"disable"}, {"sve128":"require"}]'
                    define_error = "yes"
                    expect_msg = "SVE disabled, but SVE vector lengths provided"
                - unsupported_length:
                    unsupported_len = yes
                    status_error = "yes"
                    expect_msg = "does not support the vector length"
                - discontinous_length:
                    status_error = "yes"
                    discontinous_len = "yes"
                    expect_msg = "KVM host requires all supported vector lengths smaller than .* bits .* enabled"
        - optimized-routines:
            status_error = "no"
            all_supports = "yes"
            install_pkgs = ["git", "gcc", "make", "glibc-static", "mpfr-devel", "libmpc-devel"]
            target_dir = "/home/optimized_routines"
            optimized_repo_cmd = "git clone --depth=1 https://github.com/ARM-software/optimized-routines ${target_dir}"
            optimized_echo_cmd = "echo 'CFLAGS += -march=armv8.2-a+sve' >> config.mk"
            optimized_compile_cmd = "cd ${target_dir}; cp config.mk.dist config.mk; ${optimized_echo_cmd}; make"
            optimized_execute_cmd = "cd ${target_dir}; make check 2>/dev/null"
        - sve_selftests_in_kernel:
            status_error = "no"
            all_supports = "yes"
            install_pkgs = ["git", "gcc", "make", "kernel-devel", "kernel-headers", "rsync", "brewkoji", "tar"]            
            target_dir = "/home/sve_stress"
            kernel_testing_dir = "${target_dir}/tools/testing"
            suite_dir = "${kernel_testing_dir}/selftests/arm64/fp"
            sve_exec_timeout = 240
            kernel_download_cmd = "cd /var/tmp && brew download-build --rpm %s && rpm2cpio %s | cpio -idm"
            kernel_tar_cmd = "cd /var/tmp && tar Jxf %s --strip-components 1 -C ${target_dir}"
            kernel_selftest_compile_cmd = "cd ${kernel_testing_dir}; make all -C selftests/ TARGETS=arm64"
            sve_stress_get_lenths = "${suite_dir}/sve-probe-vls"
            sve_stress_exec_cmd = "cd ${suite_dir}; timeout ${sve_exec_timeout} ./vlset --inherit %s ./sve-stress 2>/dev/null"
            sve_ptrace_exec_cmd = "cd ${suite_dir}; ./sve-ptrace"
        - no_host_sve_support:
            host_without_sve = "yes"
            status_error = "yes"
            expect_msg = ".*sve.* feature not supported by KVM"
