- conf_file.qemu_conf.set_virtlogd:
    type = set_virtlogd
    start_vm = yes
    matched_msg = "Powering off"
    aarch64:
        matched_msg = "Power down"
    variants:
        - positive_test:
            expected_result = virtlogd_enabled
            variants:
                - default:
                - enable_logd:
                    stdio_handler = "logd"
                - file_handler:
                    stdio_handler = "file"
                - reload:
                    variants:
                        - vm_with_spice:
                            with_spice = yes
                        - vm_with_console_log:
                            with_console_log = yes
                        - vm_shutoff:
                            reload_virtlogd = yes
                            start_vm = no
                - restart:
                    restart_libvirtd = yes
                - stop_libvirtd:
                    stop_libvirtd = yes
                - restart_virtlogd:
                    variants:
                        - vm_off:
                            start_vm = no
                            expected_result = virtlogd_restart
                        - vm_on:
                            start_vm = yes
                            expected_result = no_qemu_only_shutdown_logged
                - disabled_virtlogd:
                    expected_result = virtlogd_disabled
                    start_vm = no
                - specific_config_file:
                    expected_result = virtlogd_specific_config_file_enable
                    virtlogd_config_file = "/etc/sysconfig/virtlogd"
                    virtlogd_config_bak_file = "/etc/sysconfig/virtlogd.bak"
                    virtlogd_config_file_new = "/etc/libvirt/virtlogd-new.conf"
                    virtlogd_config_file_alternative_new = "/var/log/libvirt/virtlogd-new.log"
                    start_vm = no
                - specific_timeout:
                    expected_result = virtlogd_specific_timeout
                    virtlogd_config_file = "/etc/sysconfig/virtlogd"
                    virtlogd_config_bak_file = "/etc/sysconfig/virtlogd.bak"
                    virtlogd_config_file_new = "/etc/libvirt/virtlogd-new.conf"
                    start_vm = no
                - record_qenu_crash_log:
                    expected_result = record_qenu_crash_log
                    crash_information = "unable to map backing store for guest RAM: Cannot allocate memory"
                    start_vm = no
                - stop_virtlogd:
                    expected_result = stop_virtlogd
                    start_vm = no
                - default_max_size_max_backups:
                    expected_result = default_max_size_max_backups
                    max_backups = 3
                    start_vm = no
                - recreate_qemu_log:
                    expected_result = recreate_qemu_log
                    start_vm = no
                - opened_fd_of_qemu_log_file:
                    expected_result = opened_fd_of_qemu_log_file
                    start_vm = no
                - vm_destroy_log_into_qemu_log_file:
                    expected_result = vm_destroy_log_into_qemu_log_file
                    start_vm = no
                - start_vm_twice_log_into_qemu_log_file:
                    expected_result = start_vm_twice_log_into_qemu_log_file
                    start_vm = no
                - record_save_restore_guest_log:
                    expected_result = record_save_restore_guest_log
                    start_vm = no
                    save_vm_path = "/tmp/test1.save"
                - destroy_vm_remove_logs:
                    expected_result = destroy_vm_remove_logs
                    variants:
                        - stdio_logd:
                        - stdio_file:
                            stdio_handler = 'file'
                - valid_max_clients:
                    expected_result = valid_max_clients
                    max_clients = 20
                    start_vm = no
                    action = "restart"
                    virtlogd_log_file = "/var/log/libvirt/virtlogd.log"
                - valid_boundary_max_clients:
                    expected_result = valid_boundary_max_clients
                    low_max_clients = 0
                    high_max_clients = 4294967295
                    start_vm = no
                    virtlogd_log_file = "/var/log/libvirt/virtlogd.log"
                    action = "restart"
                - nclients_occupied_released:
                    expected_result = nclients_occupied_released
                    max_clients = 20
                    virtlogd_log_file = "/var/log/libvirt/virtlogd.log"
                    nclients = 'nclients=1.*nclients_unauth=0'
                    save_vm_path = "/tmp/test1.save"
                    action = "restart"
                    start_vm = no
                - guest_runnning_after_virtlogd_crash:
                    expected_result = guest_runnning_after_virtlogd_crash
                    start_vm = no
                    stdio_handler = "logd"
                - reload_new_config:
                    expected_result = reload_new_config
                    start_vm = no
                    action = "reload"
                    virtlogd_file_new = "/var/log/libvirt/virtlogd_new.log"
                    virtlogd_log_file = "/var/log/libvirt/virtlogd.log"
                - log_filters_not_same_with_loglevel:
                    expected_result = log_filters_not_same_with_loglevel
                    start_vm = no
                    action = "restart"
                    filter_loglevel_1 = "debug.*virLogDaemonClientFree"
                    filter_loglevel_2 = "info.*virEventGLibHandleUpdate"
                    filter_loglevel_3 = "debug.*virNetServerProgramNew"
                    filter_loglevel_4 = "error : virPidFileAcquirePath"
                    log_filters = "1:+logging 2:event 3:rpc"
                    log_level = 4
                    virtlogd_file = "/var/log/libvirt/virtlogd.log"
                - reload_max_size_config:
                    expected_result = reload_max_size_config
                    start_vm = no
                    action = "reload"
                    max_size = 204800
                - set_max_size_config:
                    expected_result = set_max_size_config
                    start_vm = no
                    action = "restart"
                    max_size = 204800
                - set_max_backups:
                    expected_result = set_max_backups
                    max_backups = 2
                    start_vm = no
                    action = "restart"
                - reload_max_backups:
                    expected_result = reload_max_backups
                    max_backups = 4
                    max_size = 204800
                    action = "reload"
                    start_vm = no
        - negative_test:
            variants:
                - invalid:
                    expected_result = unbootable
                    stdio_handler = 'invalid'
                - invalid_boundary_max_clients:
                    expected_result = invalid_boundary_max_clients
                    low_max_clients = -1
                    high_max_clients = 4294967296
                    start_vm = no
                    action = "restart"
                - invalid_virtlogd_conf:
                    start_vm = no
                    expected_result = 'invalid_virtlogd_conf'
                    max_clients = 'invalid'
                    variants:
                        - reload_virtlogd:
                            action = "reload"
                        - restart_virtlogd:
                            action = "restart"
