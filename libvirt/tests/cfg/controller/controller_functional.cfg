- controller.functional:
    type = controller_functional
    start_vm = "no"
    setup_controller = "yes"
    check_qemu = "yes"
    check_within_guest = "yes"
    check_contr_addr = "yes"
    remove_contr = "yes"
    variants:
        - positive_tests:
            run_vm = "yes"
            controller_type = pci
            variants:
                - pci_bridge_auto_add:
                    only i440fx 
                    remove_address = "no"
                    variants:
                        - no_pci_controller:
                            setup_controller = "no"
                            no_pci_controller = "yes"
                            controller_model = pci-root
                        - pci_bus_number_larger_zero:
                            controller_model = pci-bridge
                            setup_controller = "no"
                            pci_bus_number = 3
                        - gap_between_pciroot_pcibridge:
                            controller_model = pci-bridge
                            controller_index = 7
                        - gap_between_pcicontroller_index:
                            controller_model = pci-bridge
                            controller_index = 3
                            controller_index_second = 5
                - pci_root:
                    only i440fx
                    controller_type = pci
                    controller_model = pci-root
                    controller_pcihole64 = 1024
                - pcie_root:
                    only q35
                    controller_type = pci
                    controller_model = pcie-root
                - second_level_bridge:
                    only i440fx
                    controller_model = pci-bridge
                    controller_index = 1
                    controller_address = 00:02.0
                    second_level_controller_num = 8
                - virtio_serial_ccw:
                      only s390-virtio
                      controller_type = virtio-serial
                      controller_bus = ccw
                - controller_alias:
                    only i440fx
                    add_contrl_list = "[{'model': 'pci-root', 'index': '0', 'alias': 'ua-PCI_ROOT'},{'model': 'pci-bridge', 'alias': 'ua-PCI_BRIDGE'}, {'model': 'pci-expander-bus', 'alias': 'ua-PCI_EXPANDER_BUS'}]"
                    qemu_patterns = "[('-device', 'pci-bridge,.*,id=ua-PCI_BRIDGE'), ('-device', 'pxb,.*,id=ua-PCI_EXPANDER_BUS')]"
                    check_contr_addr = "no"
                    check_within_guest = "no"
                - pcie_root_port_model:
                    only q35
                    run_vm = "yes"
                    check_contr_addr = "no"
                    remove_contr = "no"
                    new_model = pcie-root-port
                    old_model = ioh3420
                    auto_index = "yes"
                    attach_option = "--address pci:0000.%s.00.0"
                    qemu_patterns = "[('-device', 'pcie-root-port,.*,id=pci.%s,bus=pcie.0,.*addr=0x2.*')]"
                    guest_patterns = "['00:.* PCI bridge: Red Hat']"
                    add_contrl_list = "[{'type': 'pci', 'model': 'pcie-root-port', 'bus': '0x00', 'slot': '0x02'}]"
                - pcie_pci_bridge_autoadd:
                    only q35
                    setup_controller = "no"
                    check_qemu = "no"
                    run_vm = "yes"
                    check_contr_addr = "no"
                    check_within_guest = "no"
                    # This sound device is often used as pci device on x86_64
                    sound_dict = "{'model': 'ich6'}"
                    check_cntrls_list = "[{'model': 'pcie-to-pci-bridge'}, {'type': 'pci', 'model': 'pcie-root-port'}]"
                - pcie_root_children:
                    only q35
                    run_vm = "yes"
                    check_within_guest = "no"
                    add_contrl_list = "[{'model': 'dmi-to-pci-bridge', 'index': '1', 'bus': '0x00', 'slot': '0x1e'},{'model': 'pcie-root-port', 'index': '3', 'bus': '0x00', 'slot': '0x02'},{'model': 'pcie-expander-bus', 'index': '7', 'bus': '0x00', 'slot': '0x03'}]"
                    qemu_patterns = "[('-device', 'i82801b11-bridge,id=pci.1,bus=pcie.0,addr=0x1e'), ('-device', 'pcie-root-port,.*,id=pci.3,bus=pcie.0,.*,addr=0x2'), ('-device', 'pxb-pcie,.*,id=pci.7,bus=pcie.0,addr=0x3')]"
                - pcie_expander_bus_child:
                    only q35
                    run_vm = "yes"
                    check_contr_addr = "no"
                    add_contrl_list = "[{'model': 'pcie-expander-bus', 'index': '7', 'busNr': '100'},{'model': 'pcie-root-port', 'index': '8','bus': '0x07', 'slot': '0x01'},{'model': 'dmi-to-pci-bridge', 'index': '9', 'bus': '0x07', 'slot': '0x03'}]"
                    # The controller attached to pcie-expander-bus should be 64:XX.X since busNr is 100(hex 64).
                    guest_patterns = "['64:.* PCI bridge: Red Hat', '64:.* PCI bridge: Intel.*82801']"
                - pcie_expander_bus_busNr:
                    only q35, aarch64
                    aarch64:
                        func_supported_since_libvirt_ver = (7, 7, 0)
                        unsupported_err_msg = "pcie-expander-bus is not supported on current build"
                    run_vm = "no"
                    check_contr_addr = "no"
                    check_within_guest = "no"
                    check_qemu = "no"
                    variants:
                      - default_busNr:
                          add_contrl_list = "[{'model': 'pcie-expander-bus', 'index': '8'}]"
                          check_cntrls_list = "[{'model': 'pcie-expander-bus', 'index': '8', 'modelname': 'pxb-pcie', 'busNr': '254'}]"
                      - special_busNr:
                          add_contrl_list = "[{'model': 'pcie-expander-bus', 'busNr': '100', 'index': '8'},{'model': 'pcie-expander-bus', 'busNr': '120', 'index': '9'},{'model': 'pcie-expander-bus', 'index': '10'}]"
                          # When pcie-expander-bus controller exists, the new pcie-expander-bus
                          # controller's busNr should be equal to (minimum of existing-busNr - 2)
                          check_cntrls_list = "[{'model': 'pcie-expander-bus', 'index': '10', 'modelname': 'pxb-pcie', 'busNr': '98'}]"
                - e1000e_default_assign:
                    only q35
                    run_vm = "no"
                    check_qemu = "no"
                    check_within_guest = "no"
                    attach_count = 4
                    check_contr_addr = "no"
                    setup_controller = "no"
                    attach_dev_type = "interface"
                    remove_nic = "yes"
                    attach_option = "network default --model e1000e --config"
                - pci_root_plug_child:
                    no q35, aarch64
                    check_contr_addr = "no"
                    setup_controller = "no"
                    check_qemu = "no"
                    variants:
                      - nic:
                          attach_dev_type = "interface"
                          check_dev_bus = "yes"
                          expect_bus = "0x00"
                          nic_type = "network"
                          nic_mac = "44:37:e6:cc:92:94"
                          attach_option = "${nic_type} default --model virtio --mac ${nic_mac}"
                          detach_option = "${nic_type} --mac ${nic_mac}"
                          qemu_monitor_cmd = "info network"
                          qemu_monitor_pattern = "macaddr=${nic_mac}"
                          cmd_in_guest = "['ip a |grep ${nic_mac}']"
                - pcie_expander_bus_numa:
                    only q35, aarch64
                    aarch64:
                        func_supported_since_libvirt_ver = (7, 7, 0)
                        unsupported_err_msg = "pcie-expander-bus is not supported on current build"
                    check_contr_addr = "no"
                    check_qemu = "no"
                    vcpu_count = "4"
                    q35:
                        sound_dict = "{'model': 'ich9', 'bus': '0x04', 'slot': '0x00'}"
                    aarch64:
                        rng_dict = "{'model': 'virtio', 'bus': '0x04', 'slot': '0x00'}"
                    balloon_dict = "{'model': 'virtio', 'bus': '0x08', 'slot': '0x00'}"
                    add_contrl_list = "[{'model': 'pcie-expander-bus', 'index': '3', 'busNr': '100', 'node': '1'},{'model': 'pcie-root-port', 'index': '4','bus': '0x03', 'slot': '0x01'},{'model': 'pcie-expander-bus', 'index': '7', 'busNr': '200', 'node': '0'},{'model': 'pcie-root-port', 'index': '8','bus': '0x07', 'slot': '0x01'}]"
                    cpu_numa_cells = "[{'id': '0', 'cpus': '0-1', 'memory': '512', 'unit': 'M'}, {'id': '1', 'cpus': '2-3', 'memory': '512', 'unit': 'M'}]"
                    cmd_in_guest = "[{'cat /sys/devices/pci0000\:64/**/numa_node': '1'},{'cat /sys/devices/pci0000\:c8/**/numa_node': '0'}]"
                - scsi_multifunc:
                    no i440fx
                    no s390-virtio
                    remove_contr = "no"
                    controller_type = scsi
                    controller_model = virtio-scsi
                    check_contr_addr = 'no'
                    auto_bus = 'yes'
                    check_within_guest = "no"
                    add_contrl_list = "[{'type': 'scsi', 'model': 'virtio-scsi', 'bus': '%s', 'slot': '0x00', 'func': '0x0'},{'type': 'scsi', 'model': 'virtio-scsi', 'bus': '%s', 'slot': '0x00', 'func': '0x2'}]"
                    qemu_patterns = "[('-device', 'virtio-scsi-pci,.*multifunction=on,addr=0x0.*')]"
                - virtio_serial:
                    no q35
                    controller_type = virtio-serial
                    controller_vectors = '1'
                - virtio_serial_0_vectors:
                    no q35
                    controller_type = virtio-serial
                    controller_vectors = '0'
                - usb_controller:
                    no s390-virtio
                    controller_type = usb
                    variants:
                        # ehci and ich9-ehci1 are USB2.0 controller model
                        - ehci_model:
                            no pseries
                            controller_model = ehci
                        - ich9_ehci1_model:
                            no pseries
                            controller_model = ich9-ehci1
                            companion_controller_model = ich9-uhci
                            companion_controller_num = 3
                            # companion index value should be equal to master controller
                            controller_index = 0
                        # nec-xhci and qemu-xhci are USB3.0 controller model
                        - nec_xhci_model:
                            no pseries
                            controller_model = nec-xhci
                        - qemu_xhci_model:
                            variants:
                                - non_pseries_machine:
                                    no pseries
                                    controller_model = qemu-xhci
                                - pseries_machine:
                                    only pseries
                                    setup_controller = "no"
                    variants:
                        - auto_addr:
                        - manual_addr:
                            no ich9_ehci1_model
                            controller_address = 00:09.1
        - negative_tests:
            run_vm = "yes"
            controller_type = pci
            variants:
                - invalid_index:
                    variants:
                        - invalid_root_index:
                            controller_index = 1
                            err_msg = 'XML error: pci-root and pcie-root controllers should have index 0'
                            variants:
                                - pci_root:
                                    only i440fx
                                    controller_model = pci-root
                                - pcie_root:
                                    only q35
                                    controller_model = pcie-root
                        - negative:
                            controller_index = -1
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                                    err_msg = "Cannot parse controller index ${controller_index}"
                                - pcie_root:
                                    only q35
                                    err_msg = 'Cannot parse controller index ${controller_index}'
                                    controller_model = pcie-root
                        - zero:
                            controller_index = 0
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                            variants:
                                - i440fx_machine:
                                    only i440fx
                                    err_msg = "The PCI controller with index='0' must be model='pci-root'"
                                - pseries_machine:
                                    only pseries
                                    err_msg = "The PCI controller with index='0' must be model='pci-root'"
                                - q35_machine:
                                    only q35
                                    err_msg = "The PCI controller with index='0' must be model='pcie-root'"
                        - exceed_max:
                            no pseries
                            controller_index = 256
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                            variants:
                                - i440fx_machine:
                                    only i440fx
                                    err_msg = ".*PCI controller index ${controller_index} too high, maximum is 255"
                                - q35_machine:
                                    only q35
                                    err_msg = ".*PCI slot is needed to connect a PCI controller model='pcie-root-port'"
                        - string_inx:
                            controller_index = 'abc'
                            err_msg = 'Cannot parse controller index'
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                        - index_equal_bus:
                            controller_index = 2
                            controller_address = 02:01.0
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                                    err_msg = ".*index must be larger than bus"
                                - pci_expander_bus:
                                    only i440fx
                                    controller_model = 'pci-expander-bus'
                                    err_msg = "cannot be plugged into the PCI controller with index='${controller_index}'"
                        - index_less_bus:
                            controller_index = 2
                            controller_address = 03:01.0
                            only i440fx
                            variants:
                                - pci_bridge:
                                    controller_model = pci-bridge
                                    err_msg = "a PCI slot.*connect a PCI controller model='pci-bridge'"
                                - pci_expander_bus:
                                    controller_model = 'pci-expander-bus'
                                    err_msg = "a PCI slot.*connect a PCI controller model='pci-expander-bus'"
                - invalid_model:
                    controller_index = 1
                    controller_model = pci-bridge
                    controller_address = 00:09.0
                    variants:
                        - other_model:
                            model_name = 'pci-root'
                            err_msg = ".*Unknown PCI controller model name '${model_name}'|Invalid value for attribute 'name' in element 'model': '${model_name}'"
                - invalid_root_model:
                    controller_index = 0
                    variants:
                        - pcie_root_model:
                            only i440fx
                            controller_model = 'pcie-root'
                            err_msg = "The PCI controller.*index='0' must be model='pci-root'"
                        - pci_root_model:
                            only q35
                            controller_model = 'pci-root'
                            err_msg = "The PCI controller.*index='0' must be model='pcie-root'"
                        - other_model:
                           controller_model = 'root'
                           err_msg = ".*Unknown model type '${controller_model}'"
                - invalid_chassisNr:
                    remove_contr = "no"
                    remove_address = "no"
                    auto_index = "yes"
                    auto_slot = "yes"
                    variants:
                        - zero:
                            chassisNr = 0
                            err_msg = "PCI controller chassisNr '${chassisNr}' out of range - must be 1-255"
                        - large:
                            chassisNr = 256
                            err_msg = "PCI controller chassisNr '${chassisNr}' out of range - must be 1-255"
                        - string:
                            chassisNr = 'abc'
                            err_msg = "Invalid chassisNr '${chassisNr}' in PCI controller|Invalid value for attribute 'chassisNr'.*: '${chassisNr}'. Expected integer value"
                    add_contrl_list = "[{'type': 'pci', 'model': 'pci-bridge', 'index': '%s', 'bus': '0x00', 'slot': '%s','chassisNr': '${chassisNr}'}]"
