- migration.migration_misc.canonical_paths_in_shared_filesystems:
    type = canonical_paths_in_shared_filesystems
    migration_setup = 'yes'
    storage_type = ''
    setup_nfs = 'no'
    setup_local_nfs = 'no'
    disk_type = "file"
    disk_source_protocol = "netfs"
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ''
    # SSH connection time out
    ssh_timeout = 60
    # Local URI
    virsh_migrate_connect_uri = 'qemu:///system'
    virsh_migrate_dest_state = "running"
    virsh_migrate_src_state = "shut off"
    image_convert = 'no'
    vms = avocado-vt-vm1 vm2
    server_ip = "${migrate_dest_host}"
    server_user = "root"
    server_pwd = "${migrate_dest_pwd}"
    client_ip = "${migrate_source_host}"
    client_user = "root"
    client_pwd = "${migrate_source_pwd}"
    status_error = "no"
    migrate_desturi_port = "22"
    migrate_desturi_type = "ssh"
    virsh_migrate_desturi = "qemu+ssh://${migrate_dest_host}/system"
    start_vm = "no"
    mount_options_images = 'bind,context="system_u:object_r:virt_image_t:s0"'
    mount_options_nvram = 'bind,context="system_u:object_r:qemu_var_run_t:s0"'
    mount_options_swtpm = 'bind,context="system_u:object_r:virt_var_lib_t:s0"'
    export_dir = "/var/shared_filesystems"
    mount_options = "bind"
    nfs_server_ip = "${migrate_source_host}"
    images_path = "/var/lib/libvirt/images"
    nvram_path = "/var/lib/libvirt/qemu/nvram"
    swtpm_path = "/var/lib/libvirt/swtpm"
    nfs_mount_dir = "${images_path}"
    mnt_path_name = "${images_path}"
    nfs_images_path = "${export_dir}/libvirt/images"
    nfs_nvram_path = "${export_dir}/libvirt/nvram"
    nfs_swtpm_path = "${export_dir}/libvirt/swtpm"
    mount_images_path = "${nfs_server_ip}:${export_dir}/libvirt/images"
    mount_nvram_path = "${nfs_server_ip}:${export_dir}/libvirt/nvram"
    mount_swtpm_path = "${nfs_server_ip}:${export_dir}/libvirt/swtpm"
    qemu_conf_dest = '{r".*shared_filesystems\s*=.*": "shared_filesystems = [\"${images_path}\", \"${nvram_path}\", \"${swtpm_path}\"]"}' 
    qemu_conf_src = '{"shared_filesystems": "[\"${images_path}\", \"${nvram_path}\", \"${swtpm_path}\"]"}'
    migrate_vm_back = "yes"
    variants:
        - with_tpm:
            tpm_model = "tpm-crb"
            aarch64:
                tpm_model = "tpm-tis"
            tpm_args = "{"tpm_model": "${tpm_model}", "backend_type": "emulator", "backend_version": "2.0"}"
        - without_tpm:
    variants boot_type:
        - bios:
            no aarch64, s390-virtio
            firmware_type = "seabios"
            os_dict = {'type': 'hvm', 'boots': ['hd'], 'machine': 'q35'}
        - stateless_uefi:
            no aarch64
            firmware_type = "ovmf"
            loader_path = "/usr/share/edk2/ovmf/OVMF.amdsev.fd"
            loader_dict = {'os_firmware': 'efi', 'loader_stateless': 'yes', 'loader': '${loader_path}', 'loader_type': 'rom'}
            simple_disk_check_after_mig = "no"
        - uefi_with_nvram:
            firmware_type = "ovmf"
            loader_path = "/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd"
            nvram_fd_path = "/var/lib/libvirt/qemu/nvram/${main_vm}_VARS.fd"
            nvram_template = "/usr/share/edk2/ovmf/OVMF_VARS.secboot.fd"
            secure_boot = "yes"
            aarch64:
                loader_path = "/usr/share/edk2/aarch64/QEMU_EFI-silent-pflash.qcow2"
                nvram_fd_path = "/var/lib/libvirt/qemu/nvram/${main_vm}_VARS.qcow2"
                nvram_template = "/usr/share/edk2/aarch64/vars-template-pflash.qcow2"
                secure_boot = "no"
            loader_dict = {'loader': '${loader_path}', 'nvram': '${nvram_fd_path}', 'nvram_attrs': {'template': '${nvram_template}'}, 'secure': '${secure_boot}', 'loader_readonly': 'yes', 'loader_type': 'pflash'}
