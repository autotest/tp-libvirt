- migration.pause_postcopy_migration_and_recover.unattended_migration:
    type = unattended_migration
    migration_setup = 'yes'
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ''
    # SSH connection time out
    ssh_timeout = 60
    # Local URI
    virsh_migrate_connect_uri = 'qemu:///system'
    virsh_migrate_dest_state = "running"
    virsh_migrate_src_state = "shut off"
    image_convert = 'no'
    server_ip = "${migrate_dest_host}"
    server_user = "root"
    server_pwd = "${migrate_dest_pwd}"
    check_network_accessibility_after_mig = "yes"
    migrate_desturi_port = "16509"
    migrate_desturi_type = "tcp"
    virsh_migrate_desturi = "qemu+tcp://${migrate_dest_host}/system"
    migrate_speed = "5"
    stress_package = "stress"
    stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
    postcopy_options = "--timeout 4 --timeout-postcopy --postcopy --postcopy-bandwidth 5"
    expected_dest_state = "running"
    expected_src_state = "paused"
    dominfo_check = "Persistent:     no"
    status_error = "yes"
    func_supported_since_libvirt_ver = (8, 5, 0)

    variants:
        - p2p:
            virsh_migrate_options = '--live --p2p --verbose'
        - non_p2p:
            virsh_migrate_options = '--live --verbose'
    variants make_unattended:
        - kill_src_virtqemud:
            expected_event_src = ["event 'lifecycle' for domain .*: Suspended Post-copy"]
            expected_event_src_2 = ["event 'lifecycle' for domain .*: Stopped Migrated", "event 'job-completed' for domain"]
            expected_event_target = ["event 'lifecycle' for domain.*: Resumed Post-copy", "event 'lifecycle' for domain.*: Resumed Migrated"]
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "check_event_before_unattended", "func_param": "params"}, {"func": "libvirt_service.kill_service", "func_param": "params"}, {"func": "do_common_check", "func_param": "params", "need_sleep_time": "5"}, {"func": "wait_for_unattended_mig", "func_param": "params"}]'
            service_name = "libvirtd"
        - kill_dest_virtqemud:
            expected_event_src = ["event 'lifecycle' for domain .*: Suspended Post-copy Error", "event 'lifecycle' for domain .*: Suspended Post-copy", "event 'lifecycle' for domain .*: Stopped Migrated", "event 'job-completed' for domain"]
            expected_event_target = ["event 'lifecycle' for domain.*: Resumed Post-copy"]
            expected_event_target_2 = ["event 'lifecycle' for domain.*: Resumed Migrated"]
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "check_event_before_unattended", "func_param": "params"}, {"func": "libvirt_service.kill_service", "func_param": "params"}, {"func": "do_common_check", "func_param": "params", "need_sleep_time": "5"}, {"func": "wait_for_unattended_mig", "func_param": "params"}]'
            service_name = "libvirtd"
            service_on_dst = "yes"
        - kill_dest_virtproxyd:
            expected_event_src = ["event 'lifecycle' for domain .*: Suspended Post-copy"]
            expected_event_src_2 = ["event 'lifecycle' for domain .*: Stopped Migrated", "event 'job-completed' for domain"]
            expected_event_target = ["event 'lifecycle' for domain.*: Resumed Post-copy", "event 'lifecycle' for domain.*: Resumed Migrated"]
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "check_event_before_unattended", "func_param": "params"}, {"func": "libvirt_service.kill_service", "func_param": "params"}, {"func": "do_common_check", "func_param": "params", "need_sleep_time": "5"}, {"func": "wait_for_unattended_mig", "func_param": "params"}]'
            service_name = "virtproxyd"
            service_on_dst = "yes"
        - network_issue_libvirt_layer:
            firewall_rule_on_dest = "ipv4 filter INPUT 0 -p tcp --dport ${migrate_desturi_port} -j DROP"
            firewall_rule_on_src = "ipv4 filter INPUT 0 -p tcp --sport ${migrate_desturi_port} -j DROP"
            expected_event_src = ["event 'lifecycle' for domain .*: Suspended Post-copy"]
            expected_event_src_2 = ["event 'lifecycle' for domain .*: Stopped Migrated", "event 'job-completed' for domain"]
            expected_event_target = ["event 'lifecycle' for domain.*: Resumed Post-copy", "event 'lifecycle' for domain.*: Resumed Migrated"]
            tcp_config_list = '{"tcp_keepalive_probes": "9", "tcp_keepalive_intvl": "60", "tcp_retries1": "4", "tcp_retries2": "8", "tcp_fin_timeout": "2"}'
            recover_tcp_config_list = '{"tcp_keepalive_probes": "9", "tcp_keepalive_intvl": "75", "tcp_retries1": "3", "tcp_retries2": "15", "tcp_fin_timeout": "60"}'
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "check_event_before_unattended", "func_param": "params"}, {"func": "libvirt_network.setup_firewall_rule", "func_param": "params"}, {"func": "do_common_check", "func_param": "params", "need_sleep_time": "90"}, {"func": "wait_for_unattended_mig", "func_param": "params"}, {"func": "libvirt_network.cleanup_firewall_rule", "func_param": "params"}]'
    variants migration_options:
        - with_undefinesource_persistent:
            virsh_migrate_extra = "--undefinesource --persistent"
            dominfo_check = "Persistent:     yes"
            virsh_migrate_src_state = "failed to get domain"
        - without_undefinesource_persistent:
