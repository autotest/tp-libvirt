- migration.pause_postcopy_migration_and_recover.pause_and_recover_twice:
    type = pause_and_recover_twice
    migration_setup = 'yes'
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ''
    # SSH connection time out
    ssh_timeout = 60
    # Local URI
    virsh_migrate_connect_uri = 'qemu:///system'
    virsh_migrate_dest_state = "running"
    virsh_migrate_src_state = "shut off"
    image_convert = 'no'
    server_ip = "${migrate_dest_host}"
    server_user = "root"
    server_pwd = "${migrate_dest_pwd}"
    check_network_accessibility_after_mig = "yes"
    status_error = "no"
    migrate_speed = "5"
    stress_package = "stress"
    stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
    postcopy_options = "--timeout 4 --timeout-postcopy --postcopy"
    do_migration_during_mig = "yes"
    postcopy_options_during_mig = "--postcopy-resume"
    err_msg = "job 'migration in' failed in post-copy phase"
    test_case = "pause_and_recover_twice"
    status_error_during_mig = "yes"
    status_error_during_mig_twice = "no"
    func_supported_since_libvirt_ver = (8, 5, 0)

    variants:
        - p2p:
            virsh_migrate_options = '--live --p2p --verbose'
        - non_p2p:
            virsh_migrate_options = '--live --verbose'
    variants recover_failed_reason:
        - network_issue:
            port_to_check = "49154"
            virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}:${port_to_check} --listen-address ${migrate_dest_host}"
            firewall_rule_on_dest = "ipv4 filter INPUT 0 -p tcp --dport ${port_to_check} -j DROP"
            firewall_rule_on_src = "ipv4 filter INPUT 0 -p tcp --sport ${port_to_check} -j DROP"
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "virsh.domjobabort", "func_param": "'%s --postcopy' % params.get('migrate_main_vm')", "need_sleep_time": "5"}, {"func": "libvirt_network.setup_firewall_rule", "func_param": "params"}, {"func": "do_migration", "func_param": "params", "need_sleep_time": "90"}, {"func": "libvirt_network.cleanup_firewall_rule", "func_param": "params", "need_sleep_time": "5"}, {"func": "resume_migration_again", "func_param": "params", "need_sleep_time": "5"}]'
            migrate_desturi_port = "16509"
            migrate_desturi_type = "tcp"
            virsh_migrate_desturi = "qemu+tcp://${migrate_dest_host}/system"
            err_msg_during_mig = "unable to connect to server at.*: Connection timed out"
            tcp_config_list = '{"tcp_keepalive_probes": "9", "tcp_keepalive_intvl": "60", "tcp_retries1": "4", "tcp_retries2": "8", "tcp_fin_timeout": "2"}'
            recover_tcp_config_list = '{"tcp_keepalive_probes": "9", "tcp_keepalive_intvl": "75", "tcp_retries1": "3", "tcp_retries2": "15", "tcp_fin_timeout": "60"}'
        - proxy_issue:
            transport_type = "unix_proxy"
            desturi_socket_path = "/tmp/desturi-socket"
            migrateuri_socket_path = "/var/lib/libvirt/qemu/migrateuri-socket"
            disks_uri_socket_path = "/var/lib/libvirt/qemu/disks-uri-socket"
            migrate_desturi_type = "unix_proxy"
            virsh_migrate_desturi = "qemu+unix:///system?socket=${desturi_socket_path}"
            virsh_migrate_migrateuri = "unix://${migrateuri_socket_path}"
            virsh_migrate_disks_uri = "unix://${disks_uri_socket_path}"
            virsh_migrate_extra = "--migrateuri ${virsh_migrate_migrateuri}"
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "virsh.domjobabort", "func_param": "'%s --postcopy' % params.get('migrate_main_vm')", "need_sleep_time": "5"}, {"func": "clear_pmsocat", "func_param": "params"}, {"func": "do_migration", "func_param": "params", "need_sleep_time": "60"}, {"func": "base_steps.recreate_conn_objs", "func_param": "params"}, {"func": "resume_migration_again", "func_param": "params"}]'
            check_port_or_network_conn_num = "no"
            err_msg_during_mig = "Failed to connect socket to .*: Connection refused"
