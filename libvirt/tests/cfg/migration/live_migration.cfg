- virsh.live_migration:
    type = live_migration
    migration_setup = "yes"
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ""
    # SSH connection time out
    ssh_timeout = 60
    virsh_migrate_dest_state = running
    virsh_migrate_src_state = running
    # Local URI
    virsh_migrate_connect_uri = "qemu:///system"
    image_convert = 'no'
    qemu_conf_path = '/etc/libvirt/qemu.conf'
    variants:
        - with_postcopy:
            postcopy_options = "--postcopy --timeout 10 --timeout-postcopy"
            wait_for_event = True
            event_type = "Post-copy"
        - without_postcopy:
            postcopy_options = ""
    variants:
        - p2p_live:
            virsh_migrate_options = "--live --p2p --persistent --verbose"
        - non_p2p_live:
            virsh_migrate_options = "--live --verbose"
        - non_p2p_non_live:
            only non_live_migration
            virsh_migrate_options = "--verbose"
        - p2p_live_undefinesource:
            only domjobabort
            virsh_migrate_options = "--live --p2p --persistent --undefinesource --verbose"
        - non_p2p_live_undefinesource:
            only domjobabort
            virsh_migrate_options = "--live --persistent --undefinesource --verbose"
    variants:
        - migrateuri:
            migrate_speed = 15
            stress_package = "stress"
            stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
            action_during_mig = "libvirt_network.check_established"
            action_during_mig_params_exists = "yes"
            variants:
                - with_port:
                    port_to_check = 49157
                    virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}:${port_to_check}"
                - default:
                    variants:
                        - ipv4:
                            virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}"
                        - ipv6:
                            ipv6_config = "yes"
                            ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                            ipv6_addr_des = "ENTER.YOUR.IPv6.DESTINATION"
                            virsh_migrate_extra = "--migrateuri tcp://[${ipv6_addr_des}]"
        - listen_address:
            stress_package = "stress"
            stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
            action_during_mig = "libvirt_network.check_established"
            action_during_mig_params_exists = "yes"
            bandwidth_opt = "--bandwidth 15"
            ipv6_addr_des = "ENTER.YOUR.IPv6.DESTINATION"
            ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
            variants:
                - migrateuri_ipv4_addr:
                    virsh_migrate_migrateuri = "--migrateuri tcp://${migrate_dest_host}"
                - migrateuri_ipv6_addr:
                    ipv6_config = "yes"
                    virsh_migrate_migrateuri = "--migrateuri tcp://[${ipv6_addr_des}]"
            variants:
                - specific_ipv6_addr:
                    virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address [${ipv6_addr_des}] ${bandwidth_opt}"
                    migrateuri_ipv4_addr:
                        stress_package = ''
                        status_error = 'yes'
                        err_msg = "unable to connect to server.*Connection refused"
                        action_during_mig = ''
                - all_ipaddrs:
                    variants:
                        - ipv4:
                            virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address 0.0.0.0 ${bandwidth_opt}"
                            migrateuri_ipv6_addr:
                                stress_package = ''
                                status_error = 'yes'
                                err_msg = "unable to connect to server.*Connection refused"
                                action_during_mig = ''
                        - ipv6:
                            virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address :: ${bandwidth_opt}"
        - domjobabort:
            migrate_again = 'yes'
            wait_for_event = False
            status_error = 'yes'
            err_msg = "operation aborted: migration out job: canceled by client|operation aborted: job 'migration out' canceled by client"
            migrate_again_status_error = 'no'
            vm_state_after_abort = "{'source': 'running', 'target': 'nonexist'}"
            migrate_speed = 1
            migrate_speed_again = 20
            check_local_port = 'yes'
            return_port = 'yes'
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "virsh.domjobabort", "after_event": "iteration: '1'", "func_param": "'%s' % params.get('migrate_main_vm')"}]'
            action_during_mig_again = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
        - migrate_tls_force:
            setup_tls = "yes"
            custom_pki_path = "/etc/pki/qemu"
            qemu_tls = "yes"
            server_cn = "ENTER.YOUR.EXAMPLE.SERVER_CN"
            client_cn = "ENTER.YOUR.EXAMPLE.CLIENT_CN"
            func_supported_since_libvirt_ver = (6, 9, 0)
            variants:
                - default_src_and_dest:
                    # Use default migrate_tls_force on source and dest
                    migrate_tls_force_default = "yes"
                - enable_src_disable_dest:
                    qemu_conf_src = '{"migrate_tls_force": "1"}'
                    qemu_conf_dest = '{r".*migrate_tls_force\s*=.*": "migrate_tls_force=0"}'
                    migrate_again = "yes"
                    status_error = "yes"
                    migrate_again_status_error = "no"
                    err_msg = "Requested operation is not valid: this libvirtd instance allows migration only with VIR_MIGRATE_TLS flag"
                    virsh_migrate_extra_mig_again = "--tls"
                - disable_src_enable_dest:
                    qemu_conf_src = '{"migrate_tls_force": "0"}'
                    qemu_conf_dest = '{r".*migrate_tls_force\s*=.*": "migrate_tls_force=1"}'
                    migrate_again = "yes"
                    status_error = "yes"
                    migrate_again_status_error = "no"
                    err_msg = "Requested operation is not valid: this libvirtd instance allows migration only with VIR_MIGRATE_TLS flag"
                    virsh_migrate_extra_mig_again = "--tls"
                - enable_src_and_dest:
                    qemu_conf_src = '{"migrate_tls_force": "1"}'
                    qemu_conf_dest = '{r".*migrate_tls_force\s*=.*": "migrate_tls_force=1"}'
                    migrate_again = "yes"
                    status_error = "yes"
                    migrate_again_status_error = "no"
                    err_msg = "Requested operation is not valid: this libvirtd instance allows migration only with VIR_MIGRATE_TLS flag"
                    virsh_migrate_extra_mig_again = "--tls"
                - disable_src_and_dest:
                    qemu_conf_src = '{"migrate_tls_force": "0"}'
                    qemu_conf_dest = '{r".*migrate_tls_force\s*=.*": "migrate_tls_force=0"}'
        - native_tls:
            custom_pki_path = "/etc/pki/qemu"
            setup_tls = "yes"
            qemu_tls = "yes"
            server_cn = "ENTER.YOUR.EXAMPLE.SERVER_CN"
            client_cn = "ENTER.YOUR.EXAMPLE.CLIENT_CN"
            scp_list_server = 'cacert,servercert,serverkey'
            scp_list_client = 'cacert'
            variants:
                - by_storage:
                    virsh_migrate_extra = "--tls --copy-storage-all"
                - by_shared:
                    virsh_migrate_extra = "--tls"
            variants:
                - default_x509_no:
                    no migrate_x509_one
                - default_x509_one:
                    no migrate_x509_one
                    default_tls_x509_verify = 1
                - default_x509_zero:
                    no migrate_x509_zero
                    default_tls_x509_verify = 0
            variants:
                - migrate_x509_no:
                    default_x509_no, default_x509_one:
                        err_msg = "Cannot write to TLS channel|Cannot read from TLS channel"
                        migrate_again = 'yes'
                        status_error = 'yes'
                        migrate_again_status_error = 'no'
                        scp_list_client_again = 'cacert,clientcert,clientkey'
                - migrate_x509_one:
                    migrate_tls_x509_verify = 1
                    default_x509_zero:
                        err_msg = "Cannot write to TLS channel|Cannot read from TLS channel"
                        migrate_again = 'yes'
                        status_error = 'yes'
                        migrate_again_status_error = 'no'
                        scp_list_client_again = 'cacert,clientcert,clientkey'
                - migrate_x509_zero:
                    migrate_tls_x509_verify = 0
        - poweroff_src_vm:
            wait_for_event = False
            status_error = 'yes'
            err_msg = 'error: End of file while reading data: : Input/output error|error: operation failed: domain is not running'
            vm_state_after_abort = "{'source': 'shutoff', 'target': 'nonexist'}"
            poweroff_src_vm = 'yes'
            migrate_speed = 10
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
            action_during_mig = '[{"func": "poweroff_vm", "after_event": "iteration: '1'", "func_param": "params"}]'
        - non_live_migration:
            vm_state_after_abort = "{'source': 'shutoff', 'target': 'running'}"
            migrate_speed = 10
            check_network_accessibility_after_mig = 'yes'
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "Suspended Migrated", "func_param": "params"}]'
        - suspend_virsh:
            vm_state_after_abort = "{'source': 'shutoff', 'target': 'running'}"
            migrate_speed = 10
            status_error = 'no'
            migrate_speed_high = '8796093022207'
            action_during_mig = '[{"func": "MigrationTest().do_cancel", "after_event": "migration-iteration", "before_event": "job-completed", "func_param": "signal.SIGTSTP"}, {"func": "set_migrate_speed_to_high", "func_param": "params"}]'
        - destroy_src_vm:
            status_error = 'yes'
            err_msg = 'error: operation failed: domain is not running'
            vm_state_after_abort = "{'source': 'shutoff', 'target': 'nonexist'}"
            migrate_speed = 10
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
            action_during_mig = '[{"func": "virsh.destroy", "after_event": "iteration: '1'", "func_param": "'%s' % params.get('migrate_main_vm')"}]'
        - migration_minport_occupied:
            check_port = 'yes'
            min_port = 49152
            qemu_conf_list = '["migration_port_min", "migration_port_max"]'
            migrate_speed = 10
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
        - unreachable_migrateuri:
            virsh_migrate_extra = "tcp://192.168.5.123"
            status_error = 'yes'
            err_msg = 'unable to connect to server at'
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
            virsh_migrate_extra_mig_again = "tcp://${migrate_dest_host}"
        - migration_twice:
            return_port = 'yes'
            status_error = 'no'
            migrate_speed = 20
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
            action_during_mig_again = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
        - migration_host:
            status_error = 'no'
            migrate_speed = 20
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
            ipv6_addr_des = 'ENTER.YOUR.IPv6.DESTINATION'
            server_cn = "ENTER.YOUR.EXAMPLE.SERVER_CN"
            variants:
                - set_dest_qemu_conf_ipv4:
                    qemu_conf_dest = '{r".*migration_host\s*=.*": "migration_host='${migrate_dest_host}'"}'
                - set_dest_qemu_conf_ipv6:
                    ipv6_config = 'yes'
                    qemu_conf_dest = '{r".*migration_host\s*=.*": "migration_host='${ipv6_addr_des}'"}'
                - set_src_hosts_ipv4:
                    set_migration_host = 'yes'
                    src_hosts_conf = '{"${server_cn}": "${migrate_dest_host}"}'
                - set_src_hosts_ipv6:
                    ipv6_config = 'yes'
                    set_migration_host = 'yes'
                    src_hosts_conf = '{"${server_cn}": "${ipv6_addr_des}"}'
        - execute_statistics_cmd:
            block_device_name = 'migration_test_disk.img'
            target_dev = 'vdb'
            loop_disk_type = 'block'
            exec_statistics_cmd = 'yes'
            migrate_speed = 10
            action_during_mig = '[{"func": "execute_statistics_command", "after_event": "iteration: '1'", "func_param": "params"}]'
