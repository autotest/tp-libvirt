- virsh.migrate_service_control:
    type = migrate_service_control
    migration_setup = "yes"
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ""
    # SSH connection time out
    ssh_timeout = 60
    # Local URI
    virsh_migrate_connect_uri = "qemu:///system"
    image_convert = 'no'
    variants:
        - without_postcopy:
            postcopy_options = ""
    variants:
        - p2p_live:
            virsh_migrate_options = "--live --p2p --persistent --verbose"
    variants:
        - kill_service:
            kill_service = 'yes'
            vm_state_after_abort = "{'source': 'running', 'target': 'nonexist'}"
            migrate_speed = 10
            status_error = 'yes'
            action_during_mig = '[{"func": "libvirt_service.kill_service", "after_event": "migration-iteration", "before_event": "Suspended Migrated", "func_param": "params"}]'
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
            expected_image_ownership = 'qemu:qemu'
            variants:
                - kill_libvirtd_on_dst:
                    service_name = "libvirtd"
                    service_on_dst = "yes"
                    err_msg = 'client socket is closed'
                - kill_qemu_on_dst:
                    service_name = "qemu-kvm"
                    service_on_dst = "yes"
                    err_msg = 'qemu unexpectedly closed the monitor|domain is no longer running|Domain not found|Unable to write to socket: Bad file descriptor|Channel error: Input/output error|QEMU unexpectedly closed the monitor'
                - kill_libvirtd_on_src:
                    service_name = "libvirtd"
                    err_msg = 'End of file while reading data: Input/output error'
        - restart_service_on_src:
            migrate_speed = 1
            status_error = 'yes'
            action_during_mig = '[{"func": "utils_libvirtd.libvirtd_restart", "after_event": "migration-iteration", "before_event": "Suspended Migrated"}]'
            vm_state_after_abort = "{'source': 'running', 'target': 'nonexist'}"
            err_msg = 'Disconnected .*'
            migrate_again = 'yes'
            migrate_again_status_error = 'no'
