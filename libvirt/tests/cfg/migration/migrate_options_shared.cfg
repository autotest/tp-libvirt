- virsh.migrate_options_shared:
    type = migrate_options_shared
    # Migrating non-started VM causes undefined behavior
    start_vm = yes
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Options to pass to virsh migrate command before <domain> <desturi>
    virsh_migrate_options = ""
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ""
    # SSH connection time out
    ssh_timeout = 60
    # Remember to open ports 49152-49216 on destination and
    # NAT-based host networking will cause external connectivity-loss
    # to guest, consider a shared-bridge setup instead.
    # FIXME: Implement libvirt URI connect user/password
    # virsh_migrate_destuser = root
    # virsh_migrate_destpwd = ""
    migration_setup = "yes"
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    virsh_migrate_dest_state = running
    virsh_migrate_src_state = running
    virsh_migrate_libvirtd_state = 'on'

    # Local URI
    virsh_migrate_connect_uri = "qemu:///system"

    log_outputs = "/var/log/libvirt/libvirtd.log"

    variants:
        - with_postcopy:
            postcopy_options = "--postcopy"
        - without_postcopy:
            postcopy_options = ""
    variants:
        - positive_test:
            virsh_migrate_options = "--live --verbose"
            variants:
                - multifd:
                    virsh_migrate_extra = "--parallel"
                    variants:
                        - customized_connection:
                            variants:
                                - set_minus:
                                    only without_postcopy
                                    virsh_migrate_extra = "--parallel --parallel-connections"
                                    parallel_cn_nums = -1
                                - set_min:
                                    only without_postcopy
                                    virsh_migrate_extra = "--parallel --parallel-connections"
                                    parallel_cn_nums = 1
                                - set_normal:
                                    virsh_migrate_extra = "--parallel --parallel-connections"
                                    parallel_cn_nums = 4
                                    stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                                    stress_in_vm = "yes"
                                    asynch_migrate = "yes"
                                    actions_during_migration = "checkestablished"
                                - set_max:
                                    only without_postcopy
                                    virsh_migrate_extra = "--parallel --parallel-connections"
                                    parallel_cn_nums = 255
                        - default_connection:
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            aarch64:
                                stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 512M --timeout 70"
                            stress_in_vm = "yes"
                            asynch_migrate = "yes"
                            actions_during_migration = "checkestablished"
                - compress_methods:
                    keepalive_interval= -1
                    virsh_migrate_options = "--live --verbose --compressed"
                    variants:
                        - mt_method:
                            only without_postcopy
                            libvirtd_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                            # Set conf type to the value in modular daemon mode, it will be converted to the\
                            # value in monolithic daemon mode automatically according to the test env
                            libvirtd_conf_type_dest = "virtqemud"
                            level = 9
                            threads = 5
                            dthreads = 5
                            virsh_migrate_extra = "--comp-methods mt --comp-mt-level ${level} --comp-mt-threads ${threads} --comp-mt-dthreads ${dthreads}"
                            check_remote_libvirtd_log = "yes"
                            grep_str_remote_log = '"compress-level":${level},"compress-threads":${threads},"decompress-threads":${dthreads}'
                        - xbzrle_method:
                            check_complete_job = "yes"
                            check_domjobinfo_remote = "yes"
                            jobinfo_item = "Compression cache:"
                            diff_rate = '0'
                            virsh_migrate_extra = "--comp-methods xbzrle --comp-xbzrle-cache"
                        - xbzrle_method_by_cmd:
                            only without_postcopy
                            libvirtd_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                            # Set conf type to the value in modular daemon mode, it will be converted to the\
                            # value in monolithic daemon mode automatically according to the test env
                            libvirtd_conf_type = "virtqemud"
                            check_complete_job = "yes"
                            virsh_migrate_extra = "--comp-methods xbzrle"
                            comp_cache_size = 33554432
                            compare_to_value = "32"
                            jobinfo_item = "Compression cache:"
                            grep_str_local_log = '"capability":"xbzrle","state":true'
                - timeout_postcopy:
                    only with_postcopy
                    timeout_postcopy = 10
                    virsh_migrate_extra = "--timeout ${timeout_postcopy} --timeout-postcopy"
                    stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M"
                    stress_in_vm = "yes"
                    asynch_migrate = "yes"
                - set_get_maxdowntime_during_migrate:
                    virsh_migrate_options = "--live --verbose"
                    asynch_migrate = "yes"
                    low_speed = "40"
                    libvirtd_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    libvirtd_conf_type = "virtqemud"
                    diff_rate = '0.5'
                    jobinfo_item = 'Total downtime:'
                    actions_during_migration = "setmaxdowntime"
                    migrate_maxdowntime = '0.100000'
                    check_complete_job = "yes"
                    grep_str_local_log = '"execute":"migrate_set_downtime","arguments":{"value":${migrate_maxdowntime}}|"downtime-limit":100'
                - default_maxdowntime_during_migrate:
                    only without_postcopy
                    asynch_migrate = "yes"
                    low_speed = "40"
                    diff_rate = "0.5"
                    jobinfo_item = "Expected downtime:"
                    compare_to_value = "300"
                    check_default_maxdowntime = "${compare_to_value}"
                    actions_during_migration = "domjobinfo"
                    check_complete_job = "yes"
                - set_get_maxdowntime_before_migrate:
                    only without_postcopy
                    set_maxdowntime_before_migration = "yes"
                    migrate_maxdowntime = '0.100000'
                - set_get_speed_during_migrate:
                    virsh_migrate_options = "--live --verbose"
                    asynch_migrate = "yes"
                    low_speed = "1"
                    log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    log_conf_type = "virtqemud"
                    diff_rate = '0.5'
                    jobinfo_item = 'Memory bandwidth:'
                    actions_during_migration = "setspeed,domjobinfo"
                    migrate_speed = '41943040'
                    grep_str_local_log = '"execute":"migrate_set_speed","arguments":{"value":${migrate_speed}}|"max-bandwidth":${migrate_speed}'
                - native_tls:
                    virsh_migrate_extra = "--tls"
                    custom_pki_path = "/etc/pki/qemu"
                    qemu_tls = "yes"
                    log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                    log_conf_type = "virtqemud"
                    log_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    log_conf_type_dest = "virtqemud"
                    server_cn = "ENTER.YOUR.SERVER_CN"
                    client_cn = "ENTER.YOUR.CLIENT_CN"
                    grep_str_local_log = '"dir":"/etc/pki/qemu","endpoint":"client","verify-peer":true'
                    variants:
                        - verify_client:
                            disable_verify_peer = "no"
                            qemu_conf_dest_dict = '{r"migrate_tls_x509_verify\s*=.*": 'migrate_tls_x509_verify=1'}'
                            grep_str_remote_log = '"dir":"/etc/pki/qemu","endpoint":"server","verify-peer":true'
                            variants:
                                - no_post_after_precopy:
                                - post_after_precopy:
                                    only with_postcopy
                                    virsh_migrate_extra = "--tls --postcopy-after-precopy"
                                    stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M"
                                    stress_in_vm = "yes"
                        - no_verify_client:
                            qemu_conf_dest_dict = '{r"migrate_tls_x509_verify\s*=.*": 'migrate_tls_x509_verify=0'}'
                            disable_verify_peer = "yes"
                            grep_str_remote_log = '"dir":"/etc/pki/qemu","endpoint":"server","verify-peer":false'
                - hpt_resize:
                    dmesg_content = "Attempting to resize HPT to shift %d|HPT resize to shift %d complete"
                    qemu_check = 'resize-hpt='
                    guest_xml_check_after_mig = 'hpt resizing='
                    variants:
                        - required:
                            hpt_resize = "required"
                        - enabled:
                            hpt_resize = "enabled"
                        - disabled:
                            hpt_resize = "disabled"
                - multiple_phbs:
                    new_contrl_index = 5
                    guest_xml_check_after_mig = "controller type='pci' index='[0-${new_contrl_index}]' model='pci-root'"
                - pty_channel:
                    add_channel = "yes"
                    channel_type_name = "pty"
                    target_type = "virtio"
                    target_name = "org.linux-kvm.port.1"
                    cmd_run_in_remote_guest_1 = "ls -al /dev/virtio-ports/|grep ${target_name}|cut -d'/' -f2"
                    message_sent = "message from guest"
                    cmd_run_in_remote_guest = "echo '${message_sent}' > /dev/%s"
                    remote_cat_file = "/tmp/cat.output"
                    cmd_run_in_remote_host = "cat %s > ${remote_cat_file} &"
                    cmd_run_in_remote_host_1 = "cat ${remote_cat_file}|grep '${message_sent}'"
                    cmd_run_in_remote_host_2 = "rm -f ${remote_cat_file}"
                - htm:
                    qemu_check = 'cap-htm='
                    guest_xml_check_after_mig = 'htm state='
                    variants:
                        - state_on:
                            htm_state = "on"
                        - state_off:
                            htm_state = "off"
                - vcpu-number:
                    only without_postcopy
                    migrate_vm_back = "yes"
                    guest_xml_check_after_mig = "<vcpu placement='static'>"
                    variants:
                        - vcpu_1:
                            vcpu_num = 1
                        - vcpu_4:
                            vcpu_num = 4
                        - vcpu_8:
                            vcpu_num = 8
                        - vcpu_16:
                            vcpu_num = 16
                - auto-converge:
                    log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                    log_conf_type = "virtqemud"
                    libvirtd_conf_dict = '{"keepalive_interval": "-1"}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    libvirtd_conf_type = "virtproxyd"
                    libvirtd_conf_dest_dict = '{r"keepalive_interval\s*=.*": 'keepalive_interval=-1', }'
                    libvirtd_conf_type_dest = "virtproxyd"
                    stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                    actions_during_migration = "setmaxdowntime,converge"
                    asynch_migrate = "yes"
                    stress_in_vm = "yes"
                    virsh_opt = ' -k0'
                    low_speed = "50"
                    migrate_maxdowntime = '0.100000'
                    grep_str_local_log = '"execute":"migrate-set-capabilities".*"capability":"auto-converge","state":true'
                    variants:
                        - default:
                            virsh_migrate_extra = "--auto-converge"
                        - customized:
                            initial = 30
                            increment = 15
                            virsh_migrate_extra = "--auto-converge --auto-converge-initial ${initial} --auto-converge-increment ${increment}"
                - cache_mode:
                    variants:
                        - none:
                            cache = "none"
                        - directsync:
                            cache = "directsync"
                        - writeback:
                            cache = "writeback"
                        - unsafe:
                            cache = "unsafe"
                        - writethrough:
                            cache = "writethrough"
                        - default:
                            cache = "default"
                        - nonexistence:
                            remove_cache = "yes"
                - migrate_uri:
                    virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}"
                - check_domjobinfo:
                    libvirtd_conf_dict = '{"keepalive_interval": "-1"}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    libvirtd_conf_type = "virtproxyd"
                    libvirtd_conf_dest_dict = '{r"keepalive_interval\s*=.*": 'keepalive_interval=-1', }'
                    libvirtd_conf_type_dest = "virtproxyd"
                    asynch_migrate = "yes"
                    virsh_opt = ' -k0'
                    low_speed = "10"
                    aarch64:
                        low_speed = "50"
                    stress_in_vm = "yes"
                    stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                    migrate_maxdowntime = '0.100000'
                    check_complete_job = "yes"
                    check_domjobinfo_results = "yes"
                    actions_during_migration = "setmaxdowntime,domjobinfo_output_all"
                - check_event:
                    check_event_output = "yes"
                    grep_str_local_log = 'qemuProcessHandleMigrationStatus'
                    grep_str_remote_log = 'qemuProcessHandleMigrationStatus'
                    libvirtd_conf_dict = '{"keepalive_interval": "-1"}'
                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                    # value in monolithic daemon mode automatically according to the test env
                    libvirtd_conf_type = "virtproxyd"
                    libvirtd_conf_dest_dict = '{r"keepalive_interval\s*=.*": 'keepalive_interval=-1', }'
                    libvirtd_conf_type_dest = "virtproxyd"
                    log_conf_dict = '{"log_level": "1", "log_filters": "\"1:*\"", "log_outputs": "\"1:file:${log_outputs}\""}'
                    log_conf_type = "virtqemud"
                    log_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_filters\s*=.*": 'log_filters="1:*"', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                    log_conf_type_dest = "virtqemud"
                    check_log_interval = "yes"
                    variants:
                        - event_without_postcopy:
                            only without_postcopy
                            expectedEventSrc = ["event 'migration-iteration'", "event 'lifecycle' for domain.*: Suspended Migrated", "event 'lifecycle' for domain.*: Stopped Migrated", "event 'job-completed' for domain"]
                            expectedEventTarget = ["event 'lifecycle' for domain.*Started Migrated", "event 'lifecycle' for domain.*: Resumed Migrated"]
                        - event_with_postcopy:
                            only with_postcopy
                            expectedEventSrc = ["event 'migration-iteration'", "event 'lifecycle' for domain.*: Suspended Migrated", "event 'lifecycle' for domain .*: Suspended Post-copy", "event 'lifecycle' for domain.*: Stopped Migrated", "event 'job-completed' for domain"]
                            expectedEventTarget = ["event 'lifecycle' for domain.*Started Migrated", "event 'lifecycle' for domain.*: Resumed Post-copy", "event 'lifecycle' for domain.*: Resumed Migrated"]
                            low_speed = "10"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            asynch_migrate = "yes"
                            migrate_maxdowntime = '0.100000'
                            actions_after_migration = "save_restore"
                            actions_during_migration = "setmaxdowntime,setmigratepostcopy"
                - vtpm_emulator:
                    tpm_args = "{"tpm_model": "tpm-crb", "backend_type": "emulator", "backend_version": "2.0"}"
                    pseries:
                        tpm_args = "{"tpm_model": "tpm-spapr", "backend_type": "emulator", "backend_version": "2.0"}"
                    update_tpm_secret = yes
                    src_secret_value = "sec value test"
                    dst_secret_value = ${src_secret_value}
                    cmd_in_vm_after_migration = "tpm2_getrandom 10"
                    with_postcopy:
                        low_speed = "10"
                        stress_in_vm = "yes"
                        stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                        asynch_migrate = "yes"
                        migrate_maxdowntime = '0.100000'
                        actions_during_migration = "setmaxdowntime,setmigratepostcopy"
                - p2p_migration:
                    virsh_migrate_options = "--live --p2p --verbose"
                    variants:
                        - compress_methods:
                            keepalive_interval= -1
                            variants:
                                - mt_method:
                                    only without_postcopy
                                    log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                                    # value in monolithic daemon mode automatically according to the test env
                                    log_conf_type = "virtqemud"
                                    log_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                                    log_conf_type_dest = "virtqemud"
                                    level = 9
                                    threads = 5
                                    dthreads = 5
                                    virsh_migrate_extra = "--comp-methods mt --comp-mt-level ${level} --comp-mt-threads ${threads} --comp-mt-dthreads ${dthreads}"
                                    check_remote_libvirtd_log = "yes"
                                    grep_str_remote_log = '"compress-level":${level},"compress-threads":${threads},"decompress-threads":${dthreads}'
                                - xbzrle_method:
                                    check_complete_job = "yes"
                                    check_domjobinfo_remote = "yes"
                                    jobinfo_item = "Compression cache:"
                                    diff_rate = '0'
                                    virsh_migrate_extra = "--comp-methods xbzrle --comp-xbzrle-cache"
                                - xbzrle_method_by_cmd:
                                    only without_postcopy
                                    log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                                    # Set conf type to the value in modular daemon mode, it will be converted to the\
                                    # value in monolithic daemon mode automatically according to the test env
                                    log_conf_type = "virtqemud"
                                    check_complete_job = "yes"
                                    virsh_migrate_extra = "--comp-methods xbzrle"
                                    comp_cache_size = 33554432
                                    compare_to_value = "32"
                                    jobinfo_item = "Compression cache:"
                                    grep_str_local_log = '"capability":"xbzrle","state":true'
                        - timeout_postcopy:
                            only with_postcopy
                            timeout_postcopy = 10
                            virsh_migrate_extra = "--timeout ${timeout_postcopy} --timeout-postcopy"
                            stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M"
                            stress_in_vm = "yes"
                            asynch_migrate = "yes"
                        - multifd:
                            virsh_migrate_extra = "--parallel"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            stress_in_vm = "yes"
                            asynch_migrate = "yes"
                            actions_during_migration = "checkestablished"
                            variants:
                                - customized_connection:
                                    virsh_migrate_extra = "--parallel --parallel-connections"
                                    parallel_cn_nums = 4
                                - default_connection:
                                - with_xbzrle_method:
                                    only without_postcopy
                                    virsh_migrate_extra = "--comp-methods xbzrle --parallel --parallel-connections"
                                    parallel_cn_nums = 4
                        - check_domstats:
                            asynch_migrate = "yes"
                            virsh_opt = ' -k0'
                            low_speed = "10"
                            aarch64:
                                low_speed = "50"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            migrate_maxdowntime = '0.100000'
                            actions_during_migration = "setmaxdowntime,checkdomstats"
                        - disable_keepalive:
                            only without_postcopy
                            break_network_connection = "yes"
                            asynch_migrate = "yes"
                            low_speed = "10"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            actions_during_migration = "drop_network_connection"
                            # Set conf type to the value in modular daemon mode, it will be converted to the\
                            # value in monolithic daemon mode automatically according to the test env
                            libvirtd_conf_type_dest = "virtqemud"
                            log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                            log_conf_type = "virtqemud"
                            log_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                            log_conf_type_dest = "virtqemud"
                            variants:
                                - on_both:
                                    qemu_conf_dict = '{"keepalive_interval": "-1"}'
                                    libvirtd_conf_dest_dict ='{r"keepalive_interval\s*=.*": 'keepalive_interval=-1', }'
                                    block_time = 40
                                - on_target:
                                    qemu_conf_dict = '{"keepalive_interval": "5", "keepalive_count": "5"}'
                                    libvirtd_conf_dest_dict ='{r"keepalive_interval\s*=.*": 'keepalive_interval=-1'}'
                                    grep_str_local_log = "virKeepAliveTimerInternal.*countToDeath=4 idle=10"
                                    grep_str_not_in_remote_log = "virKeepAliveTimerInternal"
                                    block_time = 10
                                - on_source:
                                    qemu_conf_dict = '{"keepalive_interval": "-1"}'
                                    libvirtd_conf_dest_dict = '{r"keepalive_interval\s*=.*": 'keepalive_interval=5', r"keepalive_count\s*=.*": 'keepalive_count=5'}'
                                    grep_str_not_in_local_log = "virKeepAliveTimerInternal.*countToDeath=4 idle=10"
                                    grep_str_remote_log = "virKeepAliveTimerInternal.*countToDeath=4 idle=10"
                                    block_time = 10
                        - native_tls:
                            virsh_migrate_extra = "--tls"
                            custom_pki_path = "/etc/pki/qemu"
                            qemu_tls = "yes"
                            client_cn = "ENTER.YOUR.CLIENT_CN"
                            disable_verify_peer = "no"
                            qemu_conf_dict = '{"migrate_tls_x509_verify": "1"}'
                            qemu_conf_dest_dict = '{r"migrate_tls_x509_verify\s*=.*": 'migrate_tls_x509_verify=1'}'
                            variants:
                                - tls_destination:
                                    only without_postcopy
                                    check_tls_destination = "yes"
                                    server_cn = "test.com.cn"
                                    virsh_migrate_extra = "--tls --tls-destination ${server_cn}"
                        - vtpm_emulator:
                            only without_postcopy
                            tpm_args = "{"tpm_model": "tpm-crb", "backend_type": "emulator", "backend_version": "2.0"}"
                            update_tpm_secret = yes
                            src_secret_value = "sec value test"
                            dst_secret_value = ${src_secret_value}
                            cmd_in_vm_after_migration = "tpm2_getrandom 10"
                        - pause_vm:
                            asynch_migrate = "yes"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            without_postcopy:
                                actions_during_migration = "suspendvm"
                            with_postcopy:
                                actions_during_migration = "suspendvm,setmigratepostcopy"
                        - pause_vm_before_migration:
                            pause_vm_before_migration = "yes"
                            actions_after_migration = "checkdomstate"
                            with_postcopy:
                                asynch_migrate = "yes"
                                stress_in_vm = "yes"
                                stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                                actions_during_migration = "setmigratepostcopy"
                        - cancel_concurrent_migration:
                            only without_postcopy
                            concurrent_migration = "yes"
                            virsh_migrate_extra = "--bandwidth 5"
                            asynch_migrate = "yes"
                            actions_during_migration = "cancel_concurrent_migration"
                - tunnelled_migration:
                    only without_postcopy
                    virsh_migrate_options = "--live --p2p --tunnelled --verbose"
                    variants:
                        - vtpm_emulator:
                            tpm_args = "{"tpm_model": "tpm-crb", "backend_type": "emulator", "backend_version": "2.0"}"
                            update_tpm_secret = yes
                            src_secret_value = "sec value test"
                            dst_secret_value = ${src_secret_value}
                            cmd_in_vm_after_migration = "tpm2_getrandom 10"                                                   
                - timer:
                    timer_migration = "yes"
                    asynch_migrate = "yes"
                    actions_during_migration = "setmaxdowntime"
                    migrate_maxdowntime = "30"
                    stress_in_vm = "yes"
                    stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M"
                    check_complete_job = "yes"
        - negative_test:
            virsh_migrate_options = "--live --verbose"
            # The variable indicates migration command should fail
            status_error = 'yes'
            variants:
                - multifd:
                    only without_postcopy
                    variants:
                        - without_parallel:
                            virsh_migrate_extra = "--parallel-connections"
                            parallel_cn_nums = 4
                            err_msg = "error: invalid argument: Turn parallel migration on to tune it"
                        - inavalid_connect_num:
                            virsh_migrate_extra = "--parallel --parallel-connections"
                            err_msg = "error: internal error: unable to execute QEMU command 'migrate-set-parameters': Parameter 'multifd(_|-)channels' expects"
                            variants:
                                - set_zero:
                                    parallel_cn_nums = 0
                                - set_cross_border:
                                    parallel_cn_nums = 256
                - cache_unsafe:
                    # Without '--unsafe', migration will fail and throw an error message
                    err_msg = "Unsafe migration: Migration may lead to data corruption"
                    variants:
                        - writeback:
                            cache = "writeback"
                        - unsafe:
                            cache = "unsafe"
                        - writethrough:
                            cache = "writethrough"
                        - default:
                            cache = "default"
                        - nonexistence:
                            remove_cache = "yes"
                - native_tls:
                    variants:
                        - inconsistent_cn_server:
                            virsh_migrate_extra = "--tls"
                            custom_pki_path = "/etc/pki/qemu"
                            qemu_tls = "yes"
                            server_cn = "INCONSISTENT.SERVER_CN"
                            client_cn = "ENTER.YOUR.CLIENT_CN"
                            disable_verify_peer = "yes"
                - vtpm_emulator:
                    only without_postcopy
                    tpm_args = "{"tpm_model": "tpm-crb", "backend_type": "emulator", "backend_version": "2.0"}"
                    update_tpm_secret = yes
                    src_secret_value = "sec value test"
                    dst_secret_value = "sec value diff"
                    err_msg = "qemu-kvm: tpm-emulator: Setting the stateblob \(type 1\) failed with a TPM error 0x21 decryption error"
                - p2p_migration:
                    virsh_migrate_options = "--live --p2p --verbose"
                    variants:
                        - kill_qemu_target:
                            only with_postcopy
                            asynch_migrate = "yes"
                            virsh_opt = ' -k0'
                            low_speed = "10"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            actions_during_migration = "killqemutarget"
                            err_msg = "error: internal error: qemu unexpectedly closed the monitor|error: operation failed: domain is not running|Domain not found"
                        - disable_keepalive:
                            only without_postcopy
                            break_network_connection = "yes"
                            asynch_migrate = "yes"
                            low_speed = "10"
                            stress_in_vm = "yes"
                            stress_args = "--cpu 4 --io 4 --vm 2 --vm-bytes 256M --timeout 70"
                            actions_during_migration= "drop_network_connection"
                            block_time = 40
                            libvirtd_conf_type_dest = "virtqemud"
                            log_conf_dict = '{"log_level": "1", "log_outputs": "\"1:file:${log_outputs}\""}'
                            log_conf_type = "virtqemud"
                            log_conf_dest_dict = '{r"log_level\s*=.*": 'log_level=1', r"log_outputs\s*=.*": 'log_outputs="1:file:${log_outputs}"'}'
                            log_conf_type_dest = "virtqemud"
                            variants:
                                - on_target:
                                    qemu_conf_dict = '{"keepalive_interval": "5", "keepalive_count": "5"}'
                                    libvirtd_conf_dest_dict ='{r"keepalive_interval\s*=.*": 'keepalive_interval=-1'}'
                                    grep_str_local_log = "No response from client .* after .* keepalive messages in .* seconds|connection closed due to keepalive timeout"
                                    grep_str_local_log_1 = "virKeepAliveTimerInternal.*countToDeath=0 idle=30"
                                    grep_str_not_in_remote_log = "virKeepAliveTimerInternal"
                                    err_msg = "error: operation failed: Lost connection to destination host|client socket is closed"
                                - on_source:
                                    qemu_conf_dict = '{"keepalive_interval": "-1"}'
                                    libvirtd_conf_dest_dict = '{r"keepalive_interval\s*=.*": 'keepalive_interval=5', r"keepalive_count\s*=.*": 'keepalive_count=5'}'
                                    grep_str_not_in_local_log = "virKeepAliveTimerInternal.*countToDeath=4 idle=10"
                                    grep_str_remote_log = "internal error: connection closed due to keepalive timeout"
                                    err_msg = "error: operation failed: migration out job:|client socket is closed"
                        - multifd:
                            only without_postcopy
                            variants:
                                - without_parallel:
                                    virsh_migrate_extra = "--parallel-connections"
                                    parallel_cn_nums = 4
                                    err_msg = "error: invalid argument: Turn parallel migration on to tune it"
                        - native_tls:
                            custom_pki_path = "/etc/pki/qemu"
                            qemu_tls = "yes"
                            server_cn = "INCORRECT.SERVER_CN"
                            client_cn = "ENTER.YOUR.CLIENT_CN"
                            disable_verify_peer = "yes"
                            variants:
                                - tls_destination:
                                    only without_postcopy
                                    check_tls_destination = "yes"
                                    variants:
                                        - without_option:
                                            virsh_migrate_extra = "--tls"
                                            err_msg = "error: internal error: qemu unexpectedly closed the monitor|Domain not found"
                                        - empty_str:
                                            virsh_migrate_extra = "--tls --tls-destination ''"
                                            err_msg = "error: Failed to get option 'tls-destination': Option argument is empty"
                                        - without_tls:
                                            virsh_migrate_extra = "--tls-destination ${server_cn}"
                                            err_msg = "error: Option --tls is required by option --tls-destination"
                                        - incorrect_hostname:
                                            virsh_migrate_extra = "--tls --tls-destination fake${server_cn}"
                                            err_msg = "error: internal error: qemu unexpectedly closed the monitor|Domain not found"
                - tunnelled_migration:
                    only without_postcopy
                    virsh_migrate_options = "--live --p2p --tunnelled --verbose"
                    variants:
                        - multifd:
                            virsh_migrate_extra = "--parallel"
                            err_msg = "Flags 'VIR_MIGRATE_TUNNELLED' and 'VIR_MIGRATE_PARALLEL' are mutually exclusive"

