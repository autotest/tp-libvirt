import os
import logging

from avocado.core import exceptions
from virttest import virsh
from virttest import libvirt_storage
from virttest import libvirt_xml
from virttest.utils_test import libvirt as utlv
from npiv import npiv_nodedev_create_destroy as nodedev
from virttest import utils_misc


def run(test, params, env):
    """
    Test command: virsh pool-define;pool-start;pool-destroy;pool-undefine

    Create a libvirt npiv pool from an XML file. The file could be given by tester or
    generated by dumpxml a pre-defined pool.
    """
    pool_xml_f = params.get("pool_create_xml_file", "/PATH/TO/POOL.XML")
    pool_name = params.get("pool_create_name", "virt_test_pool_tmp")
    option = params.get("pool_create_extra_option", "")
    readonly_mode = "yes" == params.get("pool_create_readonly_mode", "no")
    pre_def_pool = "yes" == params.get("pre_def_pool", "no")
    pool_type = params.get("pool_type", "dir")
    source_format = params.get("pool_src_format", "")
    source_name = params.get("pool_source_name", "")
    source_path = params.get("pool_source_path", "/")
    pool_target = params.get("pool_target", "pool_target")
    duplicate_element = params.get("pool_create_duplicate_element", "")
    new_pool_name = params.get("new_pool_create_name")
    pool_adapter_type = params.get("pool_adapter_type", "")
    pool_adapter_parent = params.get("pool_adapter_parent", "")
    pool_wwnn = params.get("pool_wwnn", "")
    pool_wwpn = params.get("pool_wwpn", "")

    pool_ins = libvirt_storage.StoragePool()
    if pre_def_pool and pool_ins.pool_exists(pool_name):
        raise exceptions.TestFail("Pool %s already exist" % pool_name)
    online_hbas_list = nodedev.find_hbas("hba")
    logging.debug("The online hbas are: %s", online_hbas_list)
    #if no online hba cards on host, mark case failed
    if not online_hbas_list:
        raise exceptions.TestFail("Host doesn't have online hba cards")
    else:
        if pool_adapter_parent == "":
            pool_adapter_parent = online_hbas_list[0]
    logging.debug("Using host hba %s as parent scsi device for creating vhba",
                  pool_adapter_parent)
    emulated_image = "emulated-image"
    kwargs = {'image_size': '1G', 'source_path': source_path,
              'source_name': source_name,
              'source_format': source_format,
              'pool_adapter_type': pool_adapter_type,
              'pool_adapter_parent': pool_adapter_parent,
              'pool_wwnn': pool_wwnn,
              'pool_wwpn': pool_wwpn}
    pvt = utlv.PoolVolumeTest(test, params)
    old_uuid = None
    #repare the pool's xml file
    try:
        pvt.pre_pool(pool_name, pool_type, pool_target, emulated_image,
                     **kwargs)
        virsh.pool_dumpxml(pool_name, to_file=pool_xml_f)
        old_uuid = virsh.pool_uuid(pool_name).stdout.strip()
        virsh.pool_destroy(pool_name)
    except Exception, e:
        pvt.cleanup_pool(pool_name, pool_type, pool_target,
                         emulated_image, **kwargs)
        raise exceptions.TestError("Error occurred when prepare pool xml:\n %s" % e)
    # Run virsh test
    if os.path.exists(pool_xml_f):
        f = open(pool_xml_f, 'r')
        try:
            logging.debug("Create pool from file:\n %s", f.read())
        finally:
            f.close()
    try:
        #        cmd_result = virsh.pool_create(pool_xml_f, option, ignore_status=True,
        #                                       debug=True)
        cmd_result = virsh.pool_define(pool_xml_f, ignore_status=True,
                                       debug=True)
        err = cmd_result.stderr.strip()
        status = cmd_result.exit_status
        if status:
            raise exceptions.TestFail(err)
        else:
            logging.info("Successfully define pool: %s", pool_name)
        old_vhbas = nodedev.find_hbas("vhbas")
        cmd_result = virsh.pool_start(pool_name)
        if not utils_misc.wait_for(lambda: nodedev.is_vhbas_removed(old_vhbas), timeout=5):
            logging.error("vhba not successfully created")
        err = cmd_result.stderr.strip()
        status = cmd_result.exit_status
        if status:
            raise exceptions.TestFail(err)
        else:
            logging.info("Successfully start pool: %s", pool_name)
        utlv.check_actived_pool(pool_name)
        pool_detail = libvirt_xml.PoolXML.get_pool_details(pool_name)
        vhba_lists = nodedev.find_hbas("vhba")
        logging.debug("The online vhbas are: %s", vhba_lists)
        if not vhba_lists:
            raise exceptions.TestFail("vhba not successfully created when create npiv pool")
        logging.debug("Pool detail: %s", pool_detail)
        if pool_detail['uuid'] == old_uuid:
            exceptions.TestFail("New created pool still use the old UUID %s" % old_uuid)
        bool_cmd_result = virsh.pool_destroy(pool_name)
        if not bool_cmd_result:
            raise exceptions.TestFail("Failed to destroy pool: %s", pool_name)
        else:
            logging.info("Successfully destroied pool: %s", pool_name)
        cmd_result = virsh.pool_undefine(pool_name)
        err = cmd_result.stderr.strip()
        status = cmd_result.exit_status
        if status:
            raise exceptions.TestFail(err)
        else:
            logging.info("Successfully undefined pool: %s", pool_name)
    finally:
        pvt.cleanup_pool(pool_name, pool_type, pool_target,
                         emulated_image, **kwargs)
        if os.path.exists(pool_xml_f):
            os.remove(pool_xml_f)
        nodedev.vhbas_cleanup()
